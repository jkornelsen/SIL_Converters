//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ECInterfaces
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class mappingRegistry : DataSet {
        
        private encodingsDataTable tableencodings;
        
        private encodingDataTable tableencoding;
        
        private defineMappingDataTable tabledefineMapping;
        
        private encodingMappingsDataTable tableencodingMappings;
        
        private encodingMappingDataTable tableencodingMapping;
        
        private aliasesDataTable tablealiases;
        
        private aliasDataTable tablealias;
        
        private encodingPropertiesDataTable tableencodingProperties;
        
        private encodingPropertyDataTable tableencodingProperty;
        
        private rangeCoverageDataTable tablerangeCoverage;
        
        private mappingsDataTable tablemappings;
        
        private mappingDataTable tablemapping;
        
        private uiNamesDataTable tableuiNames;
        
        private uiNameDataTable tableuiName;
        
        private specsDataTable tablespecs;
        
        private specDataTable tablespec;
        
        private stepsDataTable tablesteps;
        
        private stepDataTable tablestep;
        
        private specPropertiesDataTable tablespecProperties;
        
        private specPropertyDataTable tablespecProperty;
        
        private mappingPropertiesDataTable tablemappingProperties;
        
        private mappingPropertyDataTable tablemappingProperty;
        
        private fontMappingsDataTable tablefontMappings;
        
        private fontMappingDataTable tablefontMapping;
        
        private fontsDataTable tablefonts;
        
        private fontDataTable tablefont;
        
        private fontPropertiesDataTable tablefontProperties;
        
        private fontPropertyDataTable tablefontProperty;
        
        private fontEncodingsDataTable tablefontEncodings;
        
        private fontEncodingDataTable tablefontEncoding;
        
        private implementationsDataTable tableimplementations;
        
        private platformDataTable tableplatform;
        
        private implementDataTable tableimplement;
        
        private DataRelation relationencodingMappings_encodingMapping;
        
        private DataRelation relationaliases_alias;
        
        private DataRelation relationencodingProperties_encodingProperty;
        
        private DataRelation relationencoding_defineMapping;
        
        private DataRelation relationencoding_encodingMappings;
        
        private DataRelation relationencoding_aliases;
        
        private DataRelation relationencoding_encodingProperties;
        
        private DataRelation relationencoding_rangeCoverage;
        
        private DataRelation relationencodings_encoding;
        
        private DataRelation relationuiNames_uiName;
        
        private DataRelation relationsteps_step;
        
        private DataRelation relationspecProperties_specProperty;
        
        private DataRelation relationspec_steps;
        
        private DataRelation relationspec_specProperties;
        
        private DataRelation relationspecs_spec;
        
        private DataRelation relationmappingProperties_mappingProperty;
        
        private DataRelation relationfontMappings_fontMapping;
        
        private DataRelation relationmapping_uiNames;
        
        private DataRelation relationmapping_specs;
        
        private DataRelation relationmapping_mappingProperties;
        
        private DataRelation relationmapping_fontMappings;
        
        private DataRelation relationmappings_mapping;
        
        private DataRelation relationfontProperties_fontProperty;
        
        private DataRelation relationfontEncodings_fontEncoding;
        
        private DataRelation relationfont_fontProperties;
        
        private DataRelation relationfont_fontEncodings;
        
        private DataRelation relationfonts_font;
        
        private DataRelation relationplatform_implement;
        
        private DataRelation relationimplementations_platform;
        
        private DataRelation relationdefineMappingRef;
        
        private DataRelation relationencodingMappingRef;
        
        private DataRelation relationmappingStep;
        
        private DataRelation relationfontEncodingRef;
        
        public mappingRegistry() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected mappingRegistry(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["encodings"] != null)) {
                    this.Tables.Add(new encodingsDataTable(ds.Tables["encodings"]));
                }
                if ((ds.Tables["encoding"] != null)) {
                    this.Tables.Add(new encodingDataTable(ds.Tables["encoding"]));
                }
                if ((ds.Tables["defineMapping"] != null)) {
                    this.Tables.Add(new defineMappingDataTable(ds.Tables["defineMapping"]));
                }
                if ((ds.Tables["encodingMappings"] != null)) {
                    this.Tables.Add(new encodingMappingsDataTable(ds.Tables["encodingMappings"]));
                }
                if ((ds.Tables["encodingMapping"] != null)) {
                    this.Tables.Add(new encodingMappingDataTable(ds.Tables["encodingMapping"]));
                }
                if ((ds.Tables["aliases"] != null)) {
                    this.Tables.Add(new aliasesDataTable(ds.Tables["aliases"]));
                }
                if ((ds.Tables["alias"] != null)) {
                    this.Tables.Add(new aliasDataTable(ds.Tables["alias"]));
                }
                if ((ds.Tables["encodingProperties"] != null)) {
                    this.Tables.Add(new encodingPropertiesDataTable(ds.Tables["encodingProperties"]));
                }
                if ((ds.Tables["encodingProperty"] != null)) {
                    this.Tables.Add(new encodingPropertyDataTable(ds.Tables["encodingProperty"]));
                }
                if ((ds.Tables["rangeCoverage"] != null)) {
                    this.Tables.Add(new rangeCoverageDataTable(ds.Tables["rangeCoverage"]));
                }
                if ((ds.Tables["mappings"] != null)) {
                    this.Tables.Add(new mappingsDataTable(ds.Tables["mappings"]));
                }
                if ((ds.Tables["mapping"] != null)) {
                    this.Tables.Add(new mappingDataTable(ds.Tables["mapping"]));
                }
                if ((ds.Tables["uiNames"] != null)) {
                    this.Tables.Add(new uiNamesDataTable(ds.Tables["uiNames"]));
                }
                if ((ds.Tables["uiName"] != null)) {
                    this.Tables.Add(new uiNameDataTable(ds.Tables["uiName"]));
                }
                if ((ds.Tables["specs"] != null)) {
                    this.Tables.Add(new specsDataTable(ds.Tables["specs"]));
                }
                if ((ds.Tables["spec"] != null)) {
                    this.Tables.Add(new specDataTable(ds.Tables["spec"]));
                }
                if ((ds.Tables["steps"] != null)) {
                    this.Tables.Add(new stepsDataTable(ds.Tables["steps"]));
                }
                if ((ds.Tables["step"] != null)) {
                    this.Tables.Add(new stepDataTable(ds.Tables["step"]));
                }
                if ((ds.Tables["specProperties"] != null)) {
                    this.Tables.Add(new specPropertiesDataTable(ds.Tables["specProperties"]));
                }
                if ((ds.Tables["specProperty"] != null)) {
                    this.Tables.Add(new specPropertyDataTable(ds.Tables["specProperty"]));
                }
                if ((ds.Tables["mappingProperties"] != null)) {
                    this.Tables.Add(new mappingPropertiesDataTable(ds.Tables["mappingProperties"]));
                }
                if ((ds.Tables["mappingProperty"] != null)) {
                    this.Tables.Add(new mappingPropertyDataTable(ds.Tables["mappingProperty"]));
                }
                if ((ds.Tables["fontMappings"] != null)) {
                    this.Tables.Add(new fontMappingsDataTable(ds.Tables["fontMappings"]));
                }
                if ((ds.Tables["fontMapping"] != null)) {
                    this.Tables.Add(new fontMappingDataTable(ds.Tables["fontMapping"]));
                }
                if ((ds.Tables["fonts"] != null)) {
                    this.Tables.Add(new fontsDataTable(ds.Tables["fonts"]));
                }
                if ((ds.Tables["font"] != null)) {
                    this.Tables.Add(new fontDataTable(ds.Tables["font"]));
                }
                if ((ds.Tables["fontProperties"] != null)) {
                    this.Tables.Add(new fontPropertiesDataTable(ds.Tables["fontProperties"]));
                }
                if ((ds.Tables["fontProperty"] != null)) {
                    this.Tables.Add(new fontPropertyDataTable(ds.Tables["fontProperty"]));
                }
                if ((ds.Tables["fontEncodings"] != null)) {
                    this.Tables.Add(new fontEncodingsDataTable(ds.Tables["fontEncodings"]));
                }
                if ((ds.Tables["fontEncoding"] != null)) {
                    this.Tables.Add(new fontEncodingDataTable(ds.Tables["fontEncoding"]));
                }
                if ((ds.Tables["implementations"] != null)) {
                    this.Tables.Add(new implementationsDataTable(ds.Tables["implementations"]));
                }
                if ((ds.Tables["platform"] != null)) {
                    this.Tables.Add(new platformDataTable(ds.Tables["platform"]));
                }
                if ((ds.Tables["implement"] != null)) {
                    this.Tables.Add(new implementDataTable(ds.Tables["implement"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public encodingsDataTable encodings {
            get {
                return this.tableencodings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public encodingDataTable encoding {
            get {
                return this.tableencoding;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public defineMappingDataTable defineMapping {
            get {
                return this.tabledefineMapping;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public encodingMappingsDataTable encodingMappings {
            get {
                return this.tableencodingMappings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public encodingMappingDataTable encodingMapping {
            get {
                return this.tableencodingMapping;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public aliasesDataTable aliases {
            get {
                return this.tablealiases;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public aliasDataTable alias {
            get {
                return this.tablealias;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public encodingPropertiesDataTable encodingProperties {
            get {
                return this.tableencodingProperties;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public encodingPropertyDataTable encodingProperty {
            get {
                return this.tableencodingProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public rangeCoverageDataTable rangeCoverage {
            get {
                return this.tablerangeCoverage;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mappingsDataTable mappings {
            get {
                return this.tablemappings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mappingDataTable mapping {
            get {
                return this.tablemapping;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public uiNamesDataTable uiNames {
            get {
                return this.tableuiNames;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public uiNameDataTable uiName {
            get {
                return this.tableuiName;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public specsDataTable specs {
            get {
                return this.tablespecs;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public specDataTable spec {
            get {
                return this.tablespec;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public stepsDataTable steps {
            get {
                return this.tablesteps;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public stepDataTable step {
            get {
                return this.tablestep;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public specPropertiesDataTable specProperties {
            get {
                return this.tablespecProperties;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public specPropertyDataTable specProperty {
            get {
                return this.tablespecProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mappingPropertiesDataTable mappingProperties {
            get {
                return this.tablemappingProperties;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public mappingPropertyDataTable mappingProperty {
            get {
                return this.tablemappingProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontMappingsDataTable fontMappings {
            get {
                return this.tablefontMappings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontMappingDataTable fontMapping {
            get {
                return this.tablefontMapping;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontsDataTable fonts {
            get {
                return this.tablefonts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontDataTable font {
            get {
                return this.tablefont;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontPropertiesDataTable fontProperties {
            get {
                return this.tablefontProperties;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontPropertyDataTable fontProperty {
            get {
                return this.tablefontProperty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontEncodingsDataTable fontEncodings {
            get {
                return this.tablefontEncodings;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public fontEncodingDataTable fontEncoding {
            get {
                return this.tablefontEncoding;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public implementationsDataTable implementations {
            get {
                return this.tableimplementations;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public platformDataTable platform {
            get {
                return this.tableplatform;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public implementDataTable implement {
            get {
                return this.tableimplement;
            }
        }
        
        public override DataSet Clone() {
            mappingRegistry cln = ((mappingRegistry)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["encodings"] != null)) {
                this.Tables.Add(new encodingsDataTable(ds.Tables["encodings"]));
            }
            if ((ds.Tables["encoding"] != null)) {
                this.Tables.Add(new encodingDataTable(ds.Tables["encoding"]));
            }
            if ((ds.Tables["defineMapping"] != null)) {
                this.Tables.Add(new defineMappingDataTable(ds.Tables["defineMapping"]));
            }
            if ((ds.Tables["encodingMappings"] != null)) {
                this.Tables.Add(new encodingMappingsDataTable(ds.Tables["encodingMappings"]));
            }
            if ((ds.Tables["encodingMapping"] != null)) {
                this.Tables.Add(new encodingMappingDataTable(ds.Tables["encodingMapping"]));
            }
            if ((ds.Tables["aliases"] != null)) {
                this.Tables.Add(new aliasesDataTable(ds.Tables["aliases"]));
            }
            if ((ds.Tables["alias"] != null)) {
                this.Tables.Add(new aliasDataTable(ds.Tables["alias"]));
            }
            if ((ds.Tables["encodingProperties"] != null)) {
                this.Tables.Add(new encodingPropertiesDataTable(ds.Tables["encodingProperties"]));
            }
            if ((ds.Tables["encodingProperty"] != null)) {
                this.Tables.Add(new encodingPropertyDataTable(ds.Tables["encodingProperty"]));
            }
            if ((ds.Tables["rangeCoverage"] != null)) {
                this.Tables.Add(new rangeCoverageDataTable(ds.Tables["rangeCoverage"]));
            }
            if ((ds.Tables["mappings"] != null)) {
                this.Tables.Add(new mappingsDataTable(ds.Tables["mappings"]));
            }
            if ((ds.Tables["mapping"] != null)) {
                this.Tables.Add(new mappingDataTable(ds.Tables["mapping"]));
            }
            if ((ds.Tables["uiNames"] != null)) {
                this.Tables.Add(new uiNamesDataTable(ds.Tables["uiNames"]));
            }
            if ((ds.Tables["uiName"] != null)) {
                this.Tables.Add(new uiNameDataTable(ds.Tables["uiName"]));
            }
            if ((ds.Tables["specs"] != null)) {
                this.Tables.Add(new specsDataTable(ds.Tables["specs"]));
            }
            if ((ds.Tables["spec"] != null)) {
                this.Tables.Add(new specDataTable(ds.Tables["spec"]));
            }
            if ((ds.Tables["steps"] != null)) {
                this.Tables.Add(new stepsDataTable(ds.Tables["steps"]));
            }
            if ((ds.Tables["step"] != null)) {
                this.Tables.Add(new stepDataTable(ds.Tables["step"]));
            }
            if ((ds.Tables["specProperties"] != null)) {
                this.Tables.Add(new specPropertiesDataTable(ds.Tables["specProperties"]));
            }
            if ((ds.Tables["specProperty"] != null)) {
                this.Tables.Add(new specPropertyDataTable(ds.Tables["specProperty"]));
            }
            if ((ds.Tables["mappingProperties"] != null)) {
                this.Tables.Add(new mappingPropertiesDataTable(ds.Tables["mappingProperties"]));
            }
            if ((ds.Tables["mappingProperty"] != null)) {
                this.Tables.Add(new mappingPropertyDataTable(ds.Tables["mappingProperty"]));
            }
            if ((ds.Tables["fontMappings"] != null)) {
                this.Tables.Add(new fontMappingsDataTable(ds.Tables["fontMappings"]));
            }
            if ((ds.Tables["fontMapping"] != null)) {
                this.Tables.Add(new fontMappingDataTable(ds.Tables["fontMapping"]));
            }
            if ((ds.Tables["fonts"] != null)) {
                this.Tables.Add(new fontsDataTable(ds.Tables["fonts"]));
            }
            if ((ds.Tables["font"] != null)) {
                this.Tables.Add(new fontDataTable(ds.Tables["font"]));
            }
            if ((ds.Tables["fontProperties"] != null)) {
                this.Tables.Add(new fontPropertiesDataTable(ds.Tables["fontProperties"]));
            }
            if ((ds.Tables["fontProperty"] != null)) {
                this.Tables.Add(new fontPropertyDataTable(ds.Tables["fontProperty"]));
            }
            if ((ds.Tables["fontEncodings"] != null)) {
                this.Tables.Add(new fontEncodingsDataTable(ds.Tables["fontEncodings"]));
            }
            if ((ds.Tables["fontEncoding"] != null)) {
                this.Tables.Add(new fontEncodingDataTable(ds.Tables["fontEncoding"]));
            }
            if ((ds.Tables["implementations"] != null)) {
                this.Tables.Add(new implementationsDataTable(ds.Tables["implementations"]));
            }
            if ((ds.Tables["platform"] != null)) {
                this.Tables.Add(new platformDataTable(ds.Tables["platform"]));
            }
            if ((ds.Tables["implement"] != null)) {
                this.Tables.Add(new implementDataTable(ds.Tables["implement"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableencodings = ((encodingsDataTable)(this.Tables["encodings"]));
            if ((this.tableencodings != null)) {
                this.tableencodings.InitVars();
            }
            this.tableencoding = ((encodingDataTable)(this.Tables["encoding"]));
            if ((this.tableencoding != null)) {
                this.tableencoding.InitVars();
            }
            this.tabledefineMapping = ((defineMappingDataTable)(this.Tables["defineMapping"]));
            if ((this.tabledefineMapping != null)) {
                this.tabledefineMapping.InitVars();
            }
            this.tableencodingMappings = ((encodingMappingsDataTable)(this.Tables["encodingMappings"]));
            if ((this.tableencodingMappings != null)) {
                this.tableencodingMappings.InitVars();
            }
            this.tableencodingMapping = ((encodingMappingDataTable)(this.Tables["encodingMapping"]));
            if ((this.tableencodingMapping != null)) {
                this.tableencodingMapping.InitVars();
            }
            this.tablealiases = ((aliasesDataTable)(this.Tables["aliases"]));
            if ((this.tablealiases != null)) {
                this.tablealiases.InitVars();
            }
            this.tablealias = ((aliasDataTable)(this.Tables["alias"]));
            if ((this.tablealias != null)) {
                this.tablealias.InitVars();
            }
            this.tableencodingProperties = ((encodingPropertiesDataTable)(this.Tables["encodingProperties"]));
            if ((this.tableencodingProperties != null)) {
                this.tableencodingProperties.InitVars();
            }
            this.tableencodingProperty = ((encodingPropertyDataTable)(this.Tables["encodingProperty"]));
            if ((this.tableencodingProperty != null)) {
                this.tableencodingProperty.InitVars();
            }
            this.tablerangeCoverage = ((rangeCoverageDataTable)(this.Tables["rangeCoverage"]));
            if ((this.tablerangeCoverage != null)) {
                this.tablerangeCoverage.InitVars();
            }
            this.tablemappings = ((mappingsDataTable)(this.Tables["mappings"]));
            if ((this.tablemappings != null)) {
                this.tablemappings.InitVars();
            }
            this.tablemapping = ((mappingDataTable)(this.Tables["mapping"]));
            if ((this.tablemapping != null)) {
                this.tablemapping.InitVars();
            }
            this.tableuiNames = ((uiNamesDataTable)(this.Tables["uiNames"]));
            if ((this.tableuiNames != null)) {
                this.tableuiNames.InitVars();
            }
            this.tableuiName = ((uiNameDataTable)(this.Tables["uiName"]));
            if ((this.tableuiName != null)) {
                this.tableuiName.InitVars();
            }
            this.tablespecs = ((specsDataTable)(this.Tables["specs"]));
            if ((this.tablespecs != null)) {
                this.tablespecs.InitVars();
            }
            this.tablespec = ((specDataTable)(this.Tables["spec"]));
            if ((this.tablespec != null)) {
                this.tablespec.InitVars();
            }
            this.tablesteps = ((stepsDataTable)(this.Tables["steps"]));
            if ((this.tablesteps != null)) {
                this.tablesteps.InitVars();
            }
            this.tablestep = ((stepDataTable)(this.Tables["step"]));
            if ((this.tablestep != null)) {
                this.tablestep.InitVars();
            }
            this.tablespecProperties = ((specPropertiesDataTable)(this.Tables["specProperties"]));
            if ((this.tablespecProperties != null)) {
                this.tablespecProperties.InitVars();
            }
            this.tablespecProperty = ((specPropertyDataTable)(this.Tables["specProperty"]));
            if ((this.tablespecProperty != null)) {
                this.tablespecProperty.InitVars();
            }
            this.tablemappingProperties = ((mappingPropertiesDataTable)(this.Tables["mappingProperties"]));
            if ((this.tablemappingProperties != null)) {
                this.tablemappingProperties.InitVars();
            }
            this.tablemappingProperty = ((mappingPropertyDataTable)(this.Tables["mappingProperty"]));
            if ((this.tablemappingProperty != null)) {
                this.tablemappingProperty.InitVars();
            }
            this.tablefontMappings = ((fontMappingsDataTable)(this.Tables["fontMappings"]));
            if ((this.tablefontMappings != null)) {
                this.tablefontMappings.InitVars();
            }
            this.tablefontMapping = ((fontMappingDataTable)(this.Tables["fontMapping"]));
            if ((this.tablefontMapping != null)) {
                this.tablefontMapping.InitVars();
            }
            this.tablefonts = ((fontsDataTable)(this.Tables["fonts"]));
            if ((this.tablefonts != null)) {
                this.tablefonts.InitVars();
            }
            this.tablefont = ((fontDataTable)(this.Tables["font"]));
            if ((this.tablefont != null)) {
                this.tablefont.InitVars();
            }
            this.tablefontProperties = ((fontPropertiesDataTable)(this.Tables["fontProperties"]));
            if ((this.tablefontProperties != null)) {
                this.tablefontProperties.InitVars();
            }
            this.tablefontProperty = ((fontPropertyDataTable)(this.Tables["fontProperty"]));
            if ((this.tablefontProperty != null)) {
                this.tablefontProperty.InitVars();
            }
            this.tablefontEncodings = ((fontEncodingsDataTable)(this.Tables["fontEncodings"]));
            if ((this.tablefontEncodings != null)) {
                this.tablefontEncodings.InitVars();
            }
            this.tablefontEncoding = ((fontEncodingDataTable)(this.Tables["fontEncoding"]));
            if ((this.tablefontEncoding != null)) {
                this.tablefontEncoding.InitVars();
            }
            this.tableimplementations = ((implementationsDataTable)(this.Tables["implementations"]));
            if ((this.tableimplementations != null)) {
                this.tableimplementations.InitVars();
            }
            this.tableplatform = ((platformDataTable)(this.Tables["platform"]));
            if ((this.tableplatform != null)) {
                this.tableplatform.InitVars();
            }
            this.tableimplement = ((implementDataTable)(this.Tables["implement"]));
            if ((this.tableimplement != null)) {
                this.tableimplement.InitVars();
            }
            this.relationencodingMappings_encodingMapping = this.Relations["encodingMappings_encodingMapping"];
            this.relationaliases_alias = this.Relations["aliases_alias"];
            this.relationencodingProperties_encodingProperty = this.Relations["encodingProperties_encodingProperty"];
            this.relationencoding_defineMapping = this.Relations["encoding_defineMapping"];
            this.relationencoding_encodingMappings = this.Relations["encoding_encodingMappings"];
            this.relationencoding_aliases = this.Relations["encoding_aliases"];
            this.relationencoding_encodingProperties = this.Relations["encoding_encodingProperties"];
            this.relationencoding_rangeCoverage = this.Relations["encoding_rangeCoverage"];
            this.relationencodings_encoding = this.Relations["encodings_encoding"];
            this.relationuiNames_uiName = this.Relations["uiNames_uiName"];
            this.relationsteps_step = this.Relations["steps_step"];
            this.relationspecProperties_specProperty = this.Relations["specProperties_specProperty"];
            this.relationspec_steps = this.Relations["spec_steps"];
            this.relationspec_specProperties = this.Relations["spec_specProperties"];
            this.relationspecs_spec = this.Relations["specs_spec"];
            this.relationmappingProperties_mappingProperty = this.Relations["mappingProperties_mappingProperty"];
            this.relationfontMappings_fontMapping = this.Relations["fontMappings_fontMapping"];
            this.relationmapping_uiNames = this.Relations["mapping_uiNames"];
            this.relationmapping_specs = this.Relations["mapping_specs"];
            this.relationmapping_mappingProperties = this.Relations["mapping_mappingProperties"];
            this.relationmapping_fontMappings = this.Relations["mapping_fontMappings"];
            this.relationmappings_mapping = this.Relations["mappings_mapping"];
            this.relationfontProperties_fontProperty = this.Relations["fontProperties_fontProperty"];
            this.relationfontEncodings_fontEncoding = this.Relations["fontEncodings_fontEncoding"];
            this.relationfont_fontProperties = this.Relations["font_fontProperties"];
            this.relationfont_fontEncodings = this.Relations["font_fontEncodings"];
            this.relationfonts_font = this.Relations["fonts_font"];
            this.relationplatform_implement = this.Relations["platform_implement"];
            this.relationimplementations_platform = this.Relations["implementations_platform"];
            this.relationdefineMappingRef = this.Relations["defineMappingRef"];
            this.relationencodingMappingRef = this.Relations["encodingMappingRef"];
            this.relationmappingStep = this.Relations["mappingStep"];
            this.relationfontEncodingRef = this.Relations["fontEncodingRef"];
        }
        
        private void InitClass() {
            this.DataSetName = "mappingRegistry";
            this.Prefix = "";
            this.Namespace = "http://www.sil.org/computing/schemas/SILMappingRegistry.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableencodings = new encodingsDataTable();
            this.Tables.Add(this.tableencodings);
            this.tableencoding = new encodingDataTable();
            this.Tables.Add(this.tableencoding);
            this.tabledefineMapping = new defineMappingDataTable();
            this.Tables.Add(this.tabledefineMapping);
            this.tableencodingMappings = new encodingMappingsDataTable();
            this.Tables.Add(this.tableencodingMappings);
            this.tableencodingMapping = new encodingMappingDataTable();
            this.Tables.Add(this.tableencodingMapping);
            this.tablealiases = new aliasesDataTable();
            this.Tables.Add(this.tablealiases);
            this.tablealias = new aliasDataTable();
            this.Tables.Add(this.tablealias);
            this.tableencodingProperties = new encodingPropertiesDataTable();
            this.Tables.Add(this.tableencodingProperties);
            this.tableencodingProperty = new encodingPropertyDataTable();
            this.Tables.Add(this.tableencodingProperty);
            this.tablerangeCoverage = new rangeCoverageDataTable();
            this.Tables.Add(this.tablerangeCoverage);
            this.tablemappings = new mappingsDataTable();
            this.Tables.Add(this.tablemappings);
            this.tablemapping = new mappingDataTable();
            this.Tables.Add(this.tablemapping);
            this.tableuiNames = new uiNamesDataTable();
            this.Tables.Add(this.tableuiNames);
            this.tableuiName = new uiNameDataTable();
            this.Tables.Add(this.tableuiName);
            this.tablespecs = new specsDataTable();
            this.Tables.Add(this.tablespecs);
            this.tablespec = new specDataTable();
            this.Tables.Add(this.tablespec);
            this.tablesteps = new stepsDataTable();
            this.Tables.Add(this.tablesteps);
            this.tablestep = new stepDataTable();
            this.Tables.Add(this.tablestep);
            this.tablespecProperties = new specPropertiesDataTable();
            this.Tables.Add(this.tablespecProperties);
            this.tablespecProperty = new specPropertyDataTable();
            this.Tables.Add(this.tablespecProperty);
            this.tablemappingProperties = new mappingPropertiesDataTable();
            this.Tables.Add(this.tablemappingProperties);
            this.tablemappingProperty = new mappingPropertyDataTable();
            this.Tables.Add(this.tablemappingProperty);
            this.tablefontMappings = new fontMappingsDataTable();
            this.Tables.Add(this.tablefontMappings);
            this.tablefontMapping = new fontMappingDataTable();
            this.Tables.Add(this.tablefontMapping);
            this.tablefonts = new fontsDataTable();
            this.Tables.Add(this.tablefonts);
            this.tablefont = new fontDataTable();
            this.Tables.Add(this.tablefont);
            this.tablefontProperties = new fontPropertiesDataTable();
            this.Tables.Add(this.tablefontProperties);
            this.tablefontProperty = new fontPropertyDataTable();
            this.Tables.Add(this.tablefontProperty);
            this.tablefontEncodings = new fontEncodingsDataTable();
            this.Tables.Add(this.tablefontEncodings);
            this.tablefontEncoding = new fontEncodingDataTable();
            this.Tables.Add(this.tablefontEncoding);
            this.tableimplementations = new implementationsDataTable();
            this.Tables.Add(this.tableimplementations);
            this.tableplatform = new platformDataTable();
            this.Tables.Add(this.tableplatform);
            this.tableimplement = new implementDataTable();
            this.Tables.Add(this.tableimplement);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("encodings_encoding", new DataColumn[] {
                        this.tableencodings.encodings_IdColumn}, new DataColumn[] {
                        this.tableencoding.encodings_IdColumn});
            this.tableencoding.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encoding_defineMapping", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tabledefineMapping.name_0Column});
            this.tabledefineMapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("defineMappingRef", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tabledefineMapping.nameColumn});
            this.tabledefineMapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encoding_encodingMappings", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tableencodingMappings.nameColumn});
            this.tableencodingMappings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encodingMappings_encodingMapping", new DataColumn[] {
                        this.tableencodingMappings.encodingMappings_IdColumn}, new DataColumn[] {
                        this.tableencodingMapping.encodingMappings_IdColumn});
            this.tableencodingMapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encodingMappingRef", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tableencodingMapping.nameColumn});
            this.tableencodingMapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encoding_aliases", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tablealiases.nameColumn});
            this.tablealiases.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("aliases_alias", new DataColumn[] {
                        this.tablealiases.aliases_IdColumn}, new DataColumn[] {
                        this.tablealias.aliases_IdColumn});
            this.tablealias.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encoding_encodingProperties", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tableencodingProperties.nameColumn});
            this.tableencodingProperties.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encodingProperties_encodingProperty", new DataColumn[] {
                        this.tableencodingProperties.encodingProperties_IdColumn}, new DataColumn[] {
                        this.tableencodingProperty.encodingProperties_IdColumn});
            this.tableencodingProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("encoding_rangeCoverage", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tablerangeCoverage.nameColumn});
            this.tablerangeCoverage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mappings_mapping", new DataColumn[] {
                        this.tablemappings.mappings_IdColumn}, new DataColumn[] {
                        this.tablemapping.mappings_IdColumn});
            this.tablemapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mapping_uiNames", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tableuiNames.nameColumn});
            this.tableuiNames.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("uiNames_uiName", new DataColumn[] {
                        this.tableuiNames.uiNames_IdColumn}, new DataColumn[] {
                        this.tableuiName.uiNames_IdColumn});
            this.tableuiName.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mapping_specs", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablespecs.nameColumn});
            this.tablespecs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("specs_spec", new DataColumn[] {
                        this.tablespecs.specs_IdColumn}, new DataColumn[] {
                        this.tablespec.specs_IdColumn});
            this.tablespec.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("spec_steps", new DataColumn[] {
                        this.tablespec.spec_IdColumn}, new DataColumn[] {
                        this.tablesteps.spec_IdColumn});
            this.tablesteps.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("steps_step", new DataColumn[] {
                        this.tablesteps.steps_IdColumn}, new DataColumn[] {
                        this.tablestep.steps_IdColumn});
            this.tablestep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mappingStep", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablestep.nameColumn});
            this.tablestep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("spec_specProperties", new DataColumn[] {
                        this.tablespec.spec_IdColumn}, new DataColumn[] {
                        this.tablespecProperties.spec_IdColumn});
            this.tablespecProperties.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("specProperties_specProperty", new DataColumn[] {
                        this.tablespecProperties.specProperties_IdColumn}, new DataColumn[] {
                        this.tablespecProperty.specProperties_IdColumn});
            this.tablespecProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mapping_mappingProperties", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablemappingProperties.nameColumn});
            this.tablemappingProperties.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mappingProperties_mappingProperty", new DataColumn[] {
                        this.tablemappingProperties.mappingProperties_IdColumn}, new DataColumn[] {
                        this.tablemappingProperty.mappingProperties_IdColumn});
            this.tablemappingProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("mapping_fontMappings", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablefontMappings.nameColumn});
            this.tablefontMappings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("fontMappings_fontMapping", new DataColumn[] {
                        this.tablefontMappings.fontMappings_IdColumn}, new DataColumn[] {
                        this.tablefontMapping.fontMappings_IdColumn});
            this.tablefontMapping.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("fonts_font", new DataColumn[] {
                        this.tablefonts.fonts_IdColumn}, new DataColumn[] {
                        this.tablefont.fonts_IdColumn});
            this.tablefont.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("font_fontProperties", new DataColumn[] {
                        this.tablefont.nameColumn}, new DataColumn[] {
                        this.tablefontProperties.nameColumn});
            this.tablefontProperties.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("fontProperties_fontProperty", new DataColumn[] {
                        this.tablefontProperties.fontProperties_IdColumn}, new DataColumn[] {
                        this.tablefontProperty.fontProperties_IdColumn});
            this.tablefontProperty.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("font_fontEncodings", new DataColumn[] {
                        this.tablefont.nameColumn}, new DataColumn[] {
                        this.tablefontEncodings.nameColumn});
            this.tablefontEncodings.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("fontEncodings_fontEncoding", new DataColumn[] {
                        this.tablefontEncodings.fontEncodings_IdColumn}, new DataColumn[] {
                        this.tablefontEncoding.fontEncodings_IdColumn});
            this.tablefontEncoding.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("fontEncodingRef", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tablefontEncoding.nameColumn});
            this.tablefontEncoding.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("implementations_platform", new DataColumn[] {
                        this.tableimplementations.implementations_IdColumn}, new DataColumn[] {
                        this.tableplatform.implementations_IdColumn});
            this.tableplatform.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("platform_implement", new DataColumn[] {
                        this.tableplatform.nameColumn}, new DataColumn[] {
                        this.tableimplement.nameColumn});
            this.tableimplement.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationencodingMappings_encodingMapping = new DataRelation("encodingMappings_encodingMapping", new DataColumn[] {
                        this.tableencodingMappings.encodingMappings_IdColumn}, new DataColumn[] {
                        this.tableencodingMapping.encodingMappings_IdColumn}, false);
            this.relationencodingMappings_encodingMapping.Nested = true;
            this.Relations.Add(this.relationencodingMappings_encodingMapping);
            this.relationaliases_alias = new DataRelation("aliases_alias", new DataColumn[] {
                        this.tablealiases.aliases_IdColumn}, new DataColumn[] {
                        this.tablealias.aliases_IdColumn}, false);
            this.relationaliases_alias.Nested = true;
            this.Relations.Add(this.relationaliases_alias);
            this.relationencodingProperties_encodingProperty = new DataRelation("encodingProperties_encodingProperty", new DataColumn[] {
                        this.tableencodingProperties.encodingProperties_IdColumn}, new DataColumn[] {
                        this.tableencodingProperty.encodingProperties_IdColumn}, false);
            this.relationencodingProperties_encodingProperty.Nested = true;
            this.Relations.Add(this.relationencodingProperties_encodingProperty);
            this.relationencoding_defineMapping = new DataRelation("encoding_defineMapping", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tabledefineMapping.name_0Column}, false);
            this.relationencoding_defineMapping.Nested = true;
            this.Relations.Add(this.relationencoding_defineMapping);
            this.relationencoding_encodingMappings = new DataRelation("encoding_encodingMappings", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tableencodingMappings.nameColumn}, false);
            this.relationencoding_encodingMappings.Nested = true;
            this.Relations.Add(this.relationencoding_encodingMappings);
            this.relationencoding_aliases = new DataRelation("encoding_aliases", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tablealiases.nameColumn}, false);
            this.relationencoding_aliases.Nested = true;
            this.Relations.Add(this.relationencoding_aliases);
            this.relationencoding_encodingProperties = new DataRelation("encoding_encodingProperties", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tableencodingProperties.nameColumn}, false);
            this.relationencoding_encodingProperties.Nested = true;
            this.Relations.Add(this.relationencoding_encodingProperties);
            this.relationencoding_rangeCoverage = new DataRelation("encoding_rangeCoverage", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tablerangeCoverage.nameColumn}, false);
            this.relationencoding_rangeCoverage.Nested = true;
            this.Relations.Add(this.relationencoding_rangeCoverage);
            this.relationencodings_encoding = new DataRelation("encodings_encoding", new DataColumn[] {
                        this.tableencodings.encodings_IdColumn}, new DataColumn[] {
                        this.tableencoding.encodings_IdColumn}, false);
            this.relationencodings_encoding.Nested = true;
            this.Relations.Add(this.relationencodings_encoding);
            this.relationuiNames_uiName = new DataRelation("uiNames_uiName", new DataColumn[] {
                        this.tableuiNames.uiNames_IdColumn}, new DataColumn[] {
                        this.tableuiName.uiNames_IdColumn}, false);
            this.relationuiNames_uiName.Nested = true;
            this.Relations.Add(this.relationuiNames_uiName);
            this.relationsteps_step = new DataRelation("steps_step", new DataColumn[] {
                        this.tablesteps.steps_IdColumn}, new DataColumn[] {
                        this.tablestep.steps_IdColumn}, false);
            this.relationsteps_step.Nested = true;
            this.Relations.Add(this.relationsteps_step);
            this.relationspecProperties_specProperty = new DataRelation("specProperties_specProperty", new DataColumn[] {
                        this.tablespecProperties.specProperties_IdColumn}, new DataColumn[] {
                        this.tablespecProperty.specProperties_IdColumn}, false);
            this.relationspecProperties_specProperty.Nested = true;
            this.Relations.Add(this.relationspecProperties_specProperty);
            this.relationspec_steps = new DataRelation("spec_steps", new DataColumn[] {
                        this.tablespec.spec_IdColumn}, new DataColumn[] {
                        this.tablesteps.spec_IdColumn}, false);
            this.relationspec_steps.Nested = true;
            this.Relations.Add(this.relationspec_steps);
            this.relationspec_specProperties = new DataRelation("spec_specProperties", new DataColumn[] {
                        this.tablespec.spec_IdColumn}, new DataColumn[] {
                        this.tablespecProperties.spec_IdColumn}, false);
            this.relationspec_specProperties.Nested = true;
            this.Relations.Add(this.relationspec_specProperties);
            this.relationspecs_spec = new DataRelation("specs_spec", new DataColumn[] {
                        this.tablespecs.specs_IdColumn}, new DataColumn[] {
                        this.tablespec.specs_IdColumn}, false);
            this.relationspecs_spec.Nested = true;
            this.Relations.Add(this.relationspecs_spec);
            this.relationmappingProperties_mappingProperty = new DataRelation("mappingProperties_mappingProperty", new DataColumn[] {
                        this.tablemappingProperties.mappingProperties_IdColumn}, new DataColumn[] {
                        this.tablemappingProperty.mappingProperties_IdColumn}, false);
            this.relationmappingProperties_mappingProperty.Nested = true;
            this.Relations.Add(this.relationmappingProperties_mappingProperty);
            this.relationfontMappings_fontMapping = new DataRelation("fontMappings_fontMapping", new DataColumn[] {
                        this.tablefontMappings.fontMappings_IdColumn}, new DataColumn[] {
                        this.tablefontMapping.fontMappings_IdColumn}, false);
            this.relationfontMappings_fontMapping.Nested = true;
            this.Relations.Add(this.relationfontMappings_fontMapping);
            this.relationmapping_uiNames = new DataRelation("mapping_uiNames", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tableuiNames.nameColumn}, false);
            this.relationmapping_uiNames.Nested = true;
            this.Relations.Add(this.relationmapping_uiNames);
            this.relationmapping_specs = new DataRelation("mapping_specs", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablespecs.nameColumn}, false);
            this.relationmapping_specs.Nested = true;
            this.Relations.Add(this.relationmapping_specs);
            this.relationmapping_mappingProperties = new DataRelation("mapping_mappingProperties", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablemappingProperties.nameColumn}, false);
            this.relationmapping_mappingProperties.Nested = true;
            this.Relations.Add(this.relationmapping_mappingProperties);
            this.relationmapping_fontMappings = new DataRelation("mapping_fontMappings", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablefontMappings.nameColumn}, false);
            this.relationmapping_fontMappings.Nested = true;
            this.Relations.Add(this.relationmapping_fontMappings);
            this.relationmappings_mapping = new DataRelation("mappings_mapping", new DataColumn[] {
                        this.tablemappings.mappings_IdColumn}, new DataColumn[] {
                        this.tablemapping.mappings_IdColumn}, false);
            this.relationmappings_mapping.Nested = true;
            this.Relations.Add(this.relationmappings_mapping);
            this.relationfontProperties_fontProperty = new DataRelation("fontProperties_fontProperty", new DataColumn[] {
                        this.tablefontProperties.fontProperties_IdColumn}, new DataColumn[] {
                        this.tablefontProperty.fontProperties_IdColumn}, false);
            this.relationfontProperties_fontProperty.Nested = true;
            this.Relations.Add(this.relationfontProperties_fontProperty);
            this.relationfontEncodings_fontEncoding = new DataRelation("fontEncodings_fontEncoding", new DataColumn[] {
                        this.tablefontEncodings.fontEncodings_IdColumn}, new DataColumn[] {
                        this.tablefontEncoding.fontEncodings_IdColumn}, false);
            this.relationfontEncodings_fontEncoding.Nested = true;
            this.Relations.Add(this.relationfontEncodings_fontEncoding);
            this.relationfont_fontProperties = new DataRelation("font_fontProperties", new DataColumn[] {
                        this.tablefont.nameColumn}, new DataColumn[] {
                        this.tablefontProperties.nameColumn}, false);
            this.relationfont_fontProperties.Nested = true;
            this.Relations.Add(this.relationfont_fontProperties);
            this.relationfont_fontEncodings = new DataRelation("font_fontEncodings", new DataColumn[] {
                        this.tablefont.nameColumn}, new DataColumn[] {
                        this.tablefontEncodings.nameColumn}, false);
            this.relationfont_fontEncodings.Nested = true;
            this.Relations.Add(this.relationfont_fontEncodings);
            this.relationfonts_font = new DataRelation("fonts_font", new DataColumn[] {
                        this.tablefonts.fonts_IdColumn}, new DataColumn[] {
                        this.tablefont.fonts_IdColumn}, false);
            this.relationfonts_font.Nested = true;
            this.Relations.Add(this.relationfonts_font);
            this.relationplatform_implement = new DataRelation("platform_implement", new DataColumn[] {
                        this.tableplatform.nameColumn}, new DataColumn[] {
                        this.tableimplement.nameColumn}, false);
            this.relationplatform_implement.Nested = true;
            this.Relations.Add(this.relationplatform_implement);
            this.relationimplementations_platform = new DataRelation("implementations_platform", new DataColumn[] {
                        this.tableimplementations.implementations_IdColumn}, new DataColumn[] {
                        this.tableplatform.implementations_IdColumn}, false);
            this.relationimplementations_platform.Nested = true;
            this.Relations.Add(this.relationimplementations_platform);
            this.relationdefineMappingRef = new DataRelation("defineMappingRef", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tabledefineMapping.nameColumn}, false);
            this.Relations.Add(this.relationdefineMappingRef);
            this.relationencodingMappingRef = new DataRelation("encodingMappingRef", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tableencodingMapping.nameColumn}, false);
            this.Relations.Add(this.relationencodingMappingRef);
            this.relationmappingStep = new DataRelation("mappingStep", new DataColumn[] {
                        this.tablemapping.nameColumn}, new DataColumn[] {
                        this.tablestep.nameColumn}, false);
            this.Relations.Add(this.relationmappingStep);
            this.relationfontEncodingRef = new DataRelation("fontEncodingRef", new DataColumn[] {
                        this.tableencoding.nameColumn}, new DataColumn[] {
                        this.tablefontEncoding.nameColumn}, false);
            this.Relations.Add(this.relationfontEncodingRef);
        }
        
        private bool ShouldSerializeencodings() {
            return false;
        }
        
        private bool ShouldSerializeencoding() {
            return false;
        }
        
        private bool ShouldSerializedefineMapping() {
            return false;
        }
        
        private bool ShouldSerializeencodingMappings() {
            return false;
        }
        
        private bool ShouldSerializeencodingMapping() {
            return false;
        }
        
        private bool ShouldSerializealiases() {
            return false;
        }
        
        private bool ShouldSerializealias() {
            return false;
        }
        
        private bool ShouldSerializeencodingProperties() {
            return false;
        }
        
        private bool ShouldSerializeencodingProperty() {
            return false;
        }
        
        private bool ShouldSerializerangeCoverage() {
            return false;
        }
        
        private bool ShouldSerializemappings() {
            return false;
        }
        
        private bool ShouldSerializemapping() {
            return false;
        }
        
        private bool ShouldSerializeuiNames() {
            return false;
        }
        
        private bool ShouldSerializeuiName() {
            return false;
        }
        
        private bool ShouldSerializespecs() {
            return false;
        }
        
        private bool ShouldSerializespec() {
            return false;
        }
        
        private bool ShouldSerializesteps() {
            return false;
        }
        
        private bool ShouldSerializestep() {
            return false;
        }
        
        private bool ShouldSerializespecProperties() {
            return false;
        }
        
        private bool ShouldSerializespecProperty() {
            return false;
        }
        
        private bool ShouldSerializemappingProperties() {
            return false;
        }
        
        private bool ShouldSerializemappingProperty() {
            return false;
        }
        
        private bool ShouldSerializefontMappings() {
            return false;
        }
        
        private bool ShouldSerializefontMapping() {
            return false;
        }
        
        private bool ShouldSerializefonts() {
            return false;
        }
        
        private bool ShouldSerializefont() {
            return false;
        }
        
        private bool ShouldSerializefontProperties() {
            return false;
        }
        
        private bool ShouldSerializefontProperty() {
            return false;
        }
        
        private bool ShouldSerializefontEncodings() {
            return false;
        }
        
        private bool ShouldSerializefontEncoding() {
            return false;
        }
        
        private bool ShouldSerializeimplementations() {
            return false;
        }
        
        private bool ShouldSerializeplatform() {
            return false;
        }
        
        private bool ShouldSerializeimplement() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void encodingsRowChangeEventHandler(object sender, encodingsRowChangeEvent e);
        
        public delegate void encodingRowChangeEventHandler(object sender, encodingRowChangeEvent e);
        
        public delegate void defineMappingRowChangeEventHandler(object sender, defineMappingRowChangeEvent e);
        
        public delegate void encodingMappingsRowChangeEventHandler(object sender, encodingMappingsRowChangeEvent e);
        
        public delegate void encodingMappingRowChangeEventHandler(object sender, encodingMappingRowChangeEvent e);
        
        public delegate void aliasesRowChangeEventHandler(object sender, aliasesRowChangeEvent e);
        
        public delegate void aliasRowChangeEventHandler(object sender, aliasRowChangeEvent e);
        
        public delegate void encodingPropertiesRowChangeEventHandler(object sender, encodingPropertiesRowChangeEvent e);
        
        public delegate void encodingPropertyRowChangeEventHandler(object sender, encodingPropertyRowChangeEvent e);
        
        public delegate void rangeCoverageRowChangeEventHandler(object sender, rangeCoverageRowChangeEvent e);
        
        public delegate void mappingsRowChangeEventHandler(object sender, mappingsRowChangeEvent e);
        
        public delegate void mappingRowChangeEventHandler(object sender, mappingRowChangeEvent e);
        
        public delegate void uiNamesRowChangeEventHandler(object sender, uiNamesRowChangeEvent e);
        
        public delegate void uiNameRowChangeEventHandler(object sender, uiNameRowChangeEvent e);
        
        public delegate void specsRowChangeEventHandler(object sender, specsRowChangeEvent e);
        
        public delegate void specRowChangeEventHandler(object sender, specRowChangeEvent e);
        
        public delegate void stepsRowChangeEventHandler(object sender, stepsRowChangeEvent e);
        
        public delegate void stepRowChangeEventHandler(object sender, stepRowChangeEvent e);
        
        public delegate void specPropertiesRowChangeEventHandler(object sender, specPropertiesRowChangeEvent e);
        
        public delegate void specPropertyRowChangeEventHandler(object sender, specPropertyRowChangeEvent e);
        
        public delegate void mappingPropertiesRowChangeEventHandler(object sender, mappingPropertiesRowChangeEvent e);
        
        public delegate void mappingPropertyRowChangeEventHandler(object sender, mappingPropertyRowChangeEvent e);
        
        public delegate void fontMappingsRowChangeEventHandler(object sender, fontMappingsRowChangeEvent e);
        
        public delegate void fontMappingRowChangeEventHandler(object sender, fontMappingRowChangeEvent e);
        
        public delegate void fontsRowChangeEventHandler(object sender, fontsRowChangeEvent e);
        
        public delegate void fontRowChangeEventHandler(object sender, fontRowChangeEvent e);
        
        public delegate void fontPropertiesRowChangeEventHandler(object sender, fontPropertiesRowChangeEvent e);
        
        public delegate void fontPropertyRowChangeEventHandler(object sender, fontPropertyRowChangeEvent e);
        
        public delegate void fontEncodingsRowChangeEventHandler(object sender, fontEncodingsRowChangeEvent e);
        
        public delegate void fontEncodingRowChangeEventHandler(object sender, fontEncodingRowChangeEvent e);
        
        public delegate void implementationsRowChangeEventHandler(object sender, implementationsRowChangeEvent e);
        
        public delegate void platformRowChangeEventHandler(object sender, platformRowChangeEvent e);
        
        public delegate void implementRowChangeEventHandler(object sender, implementRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnencodings_Id;
            
            internal encodingsDataTable() : 
                    base("encodings") {
                this.InitClass();
            }
            
            internal encodingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn encodings_IdColumn {
                get {
                    return this.columnencodings_Id;
                }
            }
            
            public encodingsRow this[int index] {
                get {
                    return ((encodingsRow)(this.Rows[index]));
                }
            }
            
            public event encodingsRowChangeEventHandler encodingsRowChanged;
            
            public event encodingsRowChangeEventHandler encodingsRowChanging;
            
            public event encodingsRowChangeEventHandler encodingsRowDeleted;
            
            public event encodingsRowChangeEventHandler encodingsRowDeleting;
            
            public void AddencodingsRow(encodingsRow row) {
                this.Rows.Add(row);
            }
            
            public encodingsRow AddencodingsRow() {
                encodingsRow rowencodingsRow = ((encodingsRow)(this.NewRow()));
                rowencodingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowencodingsRow);
                return rowencodingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                encodingsDataTable cln = ((encodingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new encodingsDataTable();
            }
            
            internal void InitVars() {
                this.columnencodings_Id = this.Columns["encodings_Id"];
            }
            
            private void InitClass() {
                this.columnencodings_Id = new DataColumn("encodings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnencodings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnencodings_Id}, true));
                this.columnencodings_Id.AutoIncrement = true;
                this.columnencodings_Id.AllowDBNull = false;
                this.columnencodings_Id.Unique = true;
            }
            
            public encodingsRow NewencodingsRow() {
                return ((encodingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new encodingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(encodingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.encodingsRowChanged != null)) {
                    this.encodingsRowChanged(this, new encodingsRowChangeEvent(((encodingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.encodingsRowChanging != null)) {
                    this.encodingsRowChanging(this, new encodingsRowChangeEvent(((encodingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.encodingsRowDeleted != null)) {
                    this.encodingsRowDeleted(this, new encodingsRowChangeEvent(((encodingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.encodingsRowDeleting != null)) {
                    this.encodingsRowDeleting(this, new encodingsRowChangeEvent(((encodingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveencodingsRow(encodingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingsRow : DataRow {
            
            private encodingsDataTable tableencodings;
            
            internal encodingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableencodings = ((encodingsDataTable)(this.Table));
            }
            
            public encodingRow[] GetencodingRows() {
                return ((encodingRow[])(this.GetChildRows(this.Table.ChildRelations["encodings_encoding"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingsRowChangeEvent : EventArgs {
            
            private encodingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public encodingsRowChangeEvent(encodingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public encodingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnisUnicode;
            
            private DataColumn columnencodings_Id;
            
            internal encodingDataTable() : 
                    base("encoding") {
                this.InitClass();
            }
            
            internal encodingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn isUnicodeColumn {
                get {
                    return this.columnisUnicode;
                }
            }
            
            internal DataColumn encodings_IdColumn {
                get {
                    return this.columnencodings_Id;
                }
            }
            
            public encodingRow this[int index] {
                get {
                    return ((encodingRow)(this.Rows[index]));
                }
            }
            
            public event encodingRowChangeEventHandler encodingRowChanged;
            
            public event encodingRowChangeEventHandler encodingRowChanging;
            
            public event encodingRowChangeEventHandler encodingRowDeleted;
            
            public event encodingRowChangeEventHandler encodingRowDeleting;
            
            public void AddencodingRow(encodingRow row) {
                this.Rows.Add(row);
            }
            
            public encodingRow AddencodingRow(string name, bool isUnicode, encodingsRow parentencodingsRowByencodings_encoding) {
                encodingRow rowencodingRow = ((encodingRow)(this.NewRow()));
                rowencodingRow.ItemArray = new object[] {
                        name,
                        isUnicode,
                        parentencodingsRowByencodings_encoding[0]};
                this.Rows.Add(rowencodingRow);
                return rowencodingRow;
            }
            
            public encodingRow FindByname(string name) {
                return ((encodingRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                encodingDataTable cln = ((encodingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new encodingDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnisUnicode = this.Columns["isUnicode"];
                this.columnencodings_Id = this.Columns["encodings_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnisUnicode = new DataColumn("isUnicode", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnisUnicode);
                this.columnencodings_Id = new DataColumn("encodings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnencodings_Id);
                this.Constraints.Add(new UniqueConstraint("encodingKey", new DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
                this.columnisUnicode.Namespace = "";
                this.columnisUnicode.DefaultValue = false;
            }
            
            public encodingRow NewencodingRow() {
                return ((encodingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new encodingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(encodingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.encodingRowChanged != null)) {
                    this.encodingRowChanged(this, new encodingRowChangeEvent(((encodingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.encodingRowChanging != null)) {
                    this.encodingRowChanging(this, new encodingRowChangeEvent(((encodingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.encodingRowDeleted != null)) {
                    this.encodingRowDeleted(this, new encodingRowChangeEvent(((encodingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.encodingRowDeleting != null)) {
                    this.encodingRowDeleting(this, new encodingRowChangeEvent(((encodingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveencodingRow(encodingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingRow : DataRow {
            
            private encodingDataTable tableencoding;
            
            internal encodingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableencoding = ((encodingDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableencoding.nameColumn]));
                }
                set {
                    this[this.tableencoding.nameColumn] = value;
                }
            }
            
            public bool isUnicode {
                get {
                    try {
                        return ((bool)(this[this.tableencoding.isUnicodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableencoding.isUnicodeColumn] = value;
                }
            }
            
            public encodingsRow encodingsRow {
                get {
                    return ((encodingsRow)(this.GetParentRow(this.Table.ParentRelations["encodings_encoding"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encodings_encoding"]);
                }
            }
            
            public bool IsisUnicodeNull() {
                return this.IsNull(this.tableencoding.isUnicodeColumn);
            }
            
            public void SetisUnicodeNull() {
                this[this.tableencoding.isUnicodeColumn] = System.Convert.DBNull;
            }
            
            public defineMappingRow[] GetdefineMappingRows() {
                return ((defineMappingRow[])(this.GetChildRows(this.Table.ChildRelations["encoding_defineMapping"])));
            }
            
            public encodingMappingsRow[] GetencodingMappingsRows() {
                return ((encodingMappingsRow[])(this.GetChildRows(this.Table.ChildRelations["encoding_encodingMappings"])));
            }
            
            public aliasesRow[] GetaliasesRows() {
                return ((aliasesRow[])(this.GetChildRows(this.Table.ChildRelations["encoding_aliases"])));
            }
            
            public encodingPropertiesRow[] GetencodingPropertiesRows() {
                return ((encodingPropertiesRow[])(this.GetChildRows(this.Table.ChildRelations["encoding_encodingProperties"])));
            }
            
            public rangeCoverageRow[] GetrangeCoverageRows() {
                return ((rangeCoverageRow[])(this.GetChildRows(this.Table.ChildRelations["encoding_rangeCoverage"])));
            }
            
            public fontEncodingRow[] GetfontEncodingRows() {
                return ((fontEncodingRow[])(this.GetChildRows(this.Table.ChildRelations["fontEncodingRef"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingRowChangeEvent : EventArgs {
            
            private encodingRow eventRow;
            
            private DataRowAction eventAction;
            
            public encodingRowChangeEvent(encodingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public encodingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class defineMappingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnbecomes;
            
            private DataColumn columnreverse;
            
            private DataColumn columnname_0;
            
            internal defineMappingDataTable() : 
                    base("defineMapping") {
                this.InitClass();
            }
            
            internal defineMappingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn becomesColumn {
                get {
                    return this.columnbecomes;
                }
            }
            
            internal DataColumn reverseColumn {
                get {
                    return this.columnreverse;
                }
            }
            
            internal DataColumn name_0Column {
                get {
                    return this.columnname_0;
                }
            }
            
            public defineMappingRow this[int index] {
                get {
                    return ((defineMappingRow)(this.Rows[index]));
                }
            }
            
            public event defineMappingRowChangeEventHandler defineMappingRowChanged;
            
            public event defineMappingRowChangeEventHandler defineMappingRowChanging;
            
            public event defineMappingRowChangeEventHandler defineMappingRowDeleted;
            
            public event defineMappingRowChangeEventHandler defineMappingRowDeleting;
            
            public void AdddefineMappingRow(defineMappingRow row) {
                this.Rows.Add(row);
            }
            
            public defineMappingRow AdddefineMappingRow(mappingRow parentmappingRowBydefineMappingRef, string becomes, bool reverse, encodingRow parentencodingRowByencoding_defineMapping) {
                defineMappingRow rowdefineMappingRow = ((defineMappingRow)(this.NewRow()));
                rowdefineMappingRow.ItemArray = new object[] {
                        parentmappingRowBydefineMappingRef[0],
                        becomes,
                        reverse,
                        parentencodingRowByencoding_defineMapping[0]};
                this.Rows.Add(rowdefineMappingRow);
                return rowdefineMappingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                defineMappingDataTable cln = ((defineMappingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new defineMappingDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnbecomes = this.Columns["becomes"];
                this.columnreverse = this.Columns["reverse"];
                this.columnname_0 = this.Columns["name_0"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnbecomes = new DataColumn("becomes", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnbecomes);
                this.columnreverse = new DataColumn("reverse", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnreverse);
                this.columnname_0 = new DataColumn("name_0", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname_0);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnbecomes.Namespace = "";
                this.columnbecomes.DefaultValue = "";
                this.columnreverse.Namespace = "";
                this.columnreverse.DefaultValue = false;
            }
            
            public defineMappingRow NewdefineMappingRow() {
                return ((defineMappingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new defineMappingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(defineMappingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.defineMappingRowChanged != null)) {
                    this.defineMappingRowChanged(this, new defineMappingRowChangeEvent(((defineMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.defineMappingRowChanging != null)) {
                    this.defineMappingRowChanging(this, new defineMappingRowChangeEvent(((defineMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.defineMappingRowDeleted != null)) {
                    this.defineMappingRowDeleted(this, new defineMappingRowChangeEvent(((defineMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.defineMappingRowDeleting != null)) {
                    this.defineMappingRowDeleting(this, new defineMappingRowChangeEvent(((defineMappingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovedefineMappingRow(defineMappingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class defineMappingRow : DataRow {
            
            private defineMappingDataTable tabledefineMapping;
            
            internal defineMappingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabledefineMapping = ((defineMappingDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tabledefineMapping.nameColumn]));
                }
                set {
                    this[this.tabledefineMapping.nameColumn] = value;
                }
            }
            
            public string becomes {
                get {
                    try {
                        return ((string)(this[this.tabledefineMapping.becomesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledefineMapping.becomesColumn] = value;
                }
            }
            
            public bool reverse {
                get {
                    try {
                        return ((bool)(this[this.tabledefineMapping.reverseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledefineMapping.reverseColumn] = value;
                }
            }
            
            public encodingRow encodingRow {
                get {
                    return ((encodingRow)(this.GetParentRow(this.Table.ParentRelations["encoding_defineMapping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encoding_defineMapping"]);
                }
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["defineMappingRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["defineMappingRef"]);
                }
            }
            
            public bool IsbecomesNull() {
                return this.IsNull(this.tabledefineMapping.becomesColumn);
            }
            
            public void SetbecomesNull() {
                this[this.tabledefineMapping.becomesColumn] = System.Convert.DBNull;
            }
            
            public bool IsreverseNull() {
                return this.IsNull(this.tabledefineMapping.reverseColumn);
            }
            
            public void SetreverseNull() {
                this[this.tabledefineMapping.reverseColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class defineMappingRowChangeEvent : EventArgs {
            
            private defineMappingRow eventRow;
            
            private DataRowAction eventAction;
            
            public defineMappingRowChangeEvent(defineMappingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public defineMappingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingMappingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnencodingMappings_Id;
            
            private DataColumn columnname;
            
            internal encodingMappingsDataTable() : 
                    base("encodingMappings") {
                this.InitClass();
            }
            
            internal encodingMappingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn encodingMappings_IdColumn {
                get {
                    return this.columnencodingMappings_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public encodingMappingsRow this[int index] {
                get {
                    return ((encodingMappingsRow)(this.Rows[index]));
                }
            }
            
            public event encodingMappingsRowChangeEventHandler encodingMappingsRowChanged;
            
            public event encodingMappingsRowChangeEventHandler encodingMappingsRowChanging;
            
            public event encodingMappingsRowChangeEventHandler encodingMappingsRowDeleted;
            
            public event encodingMappingsRowChangeEventHandler encodingMappingsRowDeleting;
            
            public void AddencodingMappingsRow(encodingMappingsRow row) {
                this.Rows.Add(row);
            }
            
            public encodingMappingsRow AddencodingMappingsRow(encodingRow parentencodingRowByencoding_encodingMappings) {
                encodingMappingsRow rowencodingMappingsRow = ((encodingMappingsRow)(this.NewRow()));
                rowencodingMappingsRow.ItemArray = new object[] {
                        null,
                        parentencodingRowByencoding_encodingMappings[0]};
                this.Rows.Add(rowencodingMappingsRow);
                return rowencodingMappingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                encodingMappingsDataTable cln = ((encodingMappingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new encodingMappingsDataTable();
            }
            
            internal void InitVars() {
                this.columnencodingMappings_Id = this.Columns["encodingMappings_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnencodingMappings_Id = new DataColumn("encodingMappings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnencodingMappings_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnencodingMappings_Id}, true));
                this.columnencodingMappings_Id.AutoIncrement = true;
                this.columnencodingMappings_Id.AllowDBNull = false;
                this.columnencodingMappings_Id.Unique = true;
            }
            
            public encodingMappingsRow NewencodingMappingsRow() {
                return ((encodingMappingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new encodingMappingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(encodingMappingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.encodingMappingsRowChanged != null)) {
                    this.encodingMappingsRowChanged(this, new encodingMappingsRowChangeEvent(((encodingMappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.encodingMappingsRowChanging != null)) {
                    this.encodingMappingsRowChanging(this, new encodingMappingsRowChangeEvent(((encodingMappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.encodingMappingsRowDeleted != null)) {
                    this.encodingMappingsRowDeleted(this, new encodingMappingsRowChangeEvent(((encodingMappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.encodingMappingsRowDeleting != null)) {
                    this.encodingMappingsRowDeleting(this, new encodingMappingsRowChangeEvent(((encodingMappingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveencodingMappingsRow(encodingMappingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingMappingsRow : DataRow {
            
            private encodingMappingsDataTable tableencodingMappings;
            
            internal encodingMappingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableencodingMappings = ((encodingMappingsDataTable)(this.Table));
            }
            
            public encodingRow encodingRow {
                get {
                    return ((encodingRow)(this.GetParentRow(this.Table.ParentRelations["encoding_encodingMappings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encoding_encodingMappings"]);
                }
            }
            
            public encodingMappingRow[] GetencodingMappingRows() {
                return ((encodingMappingRow[])(this.GetChildRows(this.Table.ChildRelations["encodingMappings_encodingMapping"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingMappingsRowChangeEvent : EventArgs {
            
            private encodingMappingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public encodingMappingsRowChangeEvent(encodingMappingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public encodingMappingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingMappingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnbecomes;
            
            private DataColumn columnreverse;
            
            private DataColumn columnencodingMappings_Id;
            
            internal encodingMappingDataTable() : 
                    base("encodingMapping") {
                this.InitClass();
            }
            
            internal encodingMappingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn becomesColumn {
                get {
                    return this.columnbecomes;
                }
            }
            
            internal DataColumn reverseColumn {
                get {
                    return this.columnreverse;
                }
            }
            
            internal DataColumn encodingMappings_IdColumn {
                get {
                    return this.columnencodingMappings_Id;
                }
            }
            
            public encodingMappingRow this[int index] {
                get {
                    return ((encodingMappingRow)(this.Rows[index]));
                }
            }
            
            public event encodingMappingRowChangeEventHandler encodingMappingRowChanged;
            
            public event encodingMappingRowChangeEventHandler encodingMappingRowChanging;
            
            public event encodingMappingRowChangeEventHandler encodingMappingRowDeleted;
            
            public event encodingMappingRowChangeEventHandler encodingMappingRowDeleting;
            
            public void AddencodingMappingRow(encodingMappingRow row) {
                this.Rows.Add(row);
            }
            
            public encodingMappingRow AddencodingMappingRow(mappingRow parentmappingRowByencodingMappingRef, string becomes, bool reverse, encodingMappingsRow parentencodingMappingsRowByencodingMappings_encodingMapping) {
                encodingMappingRow rowencodingMappingRow = ((encodingMappingRow)(this.NewRow()));
                rowencodingMappingRow.ItemArray = new object[] {
                        parentmappingRowByencodingMappingRef[0],
                        becomes,
                        reverse,
                        parentencodingMappingsRowByencodingMappings_encodingMapping[0]};
                this.Rows.Add(rowencodingMappingRow);
                return rowencodingMappingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                encodingMappingDataTable cln = ((encodingMappingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new encodingMappingDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnbecomes = this.Columns["becomes"];
                this.columnreverse = this.Columns["reverse"];
                this.columnencodingMappings_Id = this.Columns["encodingMappings_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnbecomes = new DataColumn("becomes", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnbecomes);
                this.columnreverse = new DataColumn("reverse", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnreverse);
                this.columnencodingMappings_Id = new DataColumn("encodingMappings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnencodingMappings_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnbecomes.Namespace = "";
                this.columnbecomes.DefaultValue = "";
                this.columnreverse.Namespace = "";
                this.columnreverse.DefaultValue = false;
            }
            
            public encodingMappingRow NewencodingMappingRow() {
                return ((encodingMappingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new encodingMappingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(encodingMappingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.encodingMappingRowChanged != null)) {
                    this.encodingMappingRowChanged(this, new encodingMappingRowChangeEvent(((encodingMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.encodingMappingRowChanging != null)) {
                    this.encodingMappingRowChanging(this, new encodingMappingRowChangeEvent(((encodingMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.encodingMappingRowDeleted != null)) {
                    this.encodingMappingRowDeleted(this, new encodingMappingRowChangeEvent(((encodingMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.encodingMappingRowDeleting != null)) {
                    this.encodingMappingRowDeleting(this, new encodingMappingRowChangeEvent(((encodingMappingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveencodingMappingRow(encodingMappingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingMappingRow : DataRow {
            
            private encodingMappingDataTable tableencodingMapping;
            
            internal encodingMappingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableencodingMapping = ((encodingMappingDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableencodingMapping.nameColumn]));
                }
                set {
                    this[this.tableencodingMapping.nameColumn] = value;
                }
            }
            
            public string becomes {
                get {
                    try {
                        return ((string)(this[this.tableencodingMapping.becomesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableencodingMapping.becomesColumn] = value;
                }
            }
            
            public bool reverse {
                get {
                    try {
                        return ((bool)(this[this.tableencodingMapping.reverseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableencodingMapping.reverseColumn] = value;
                }
            }
            
            public encodingMappingsRow encodingMappingsRow {
                get {
                    return ((encodingMappingsRow)(this.GetParentRow(this.Table.ParentRelations["encodingMappings_encodingMapping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encodingMappings_encodingMapping"]);
                }
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["encodingMappingRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encodingMappingRef"]);
                }
            }
            
            public bool IsbecomesNull() {
                return this.IsNull(this.tableencodingMapping.becomesColumn);
            }
            
            public void SetbecomesNull() {
                this[this.tableencodingMapping.becomesColumn] = System.Convert.DBNull;
            }
            
            public bool IsreverseNull() {
                return this.IsNull(this.tableencodingMapping.reverseColumn);
            }
            
            public void SetreverseNull() {
                this[this.tableencodingMapping.reverseColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingMappingRowChangeEvent : EventArgs {
            
            private encodingMappingRow eventRow;
            
            private DataRowAction eventAction;
            
            public encodingMappingRowChangeEvent(encodingMappingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public encodingMappingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class aliasesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnaliases_Id;
            
            private DataColumn columnname;
            
            internal aliasesDataTable() : 
                    base("aliases") {
                this.InitClass();
            }
            
            internal aliasesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn aliases_IdColumn {
                get {
                    return this.columnaliases_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public aliasesRow this[int index] {
                get {
                    return ((aliasesRow)(this.Rows[index]));
                }
            }
            
            public event aliasesRowChangeEventHandler aliasesRowChanged;
            
            public event aliasesRowChangeEventHandler aliasesRowChanging;
            
            public event aliasesRowChangeEventHandler aliasesRowDeleted;
            
            public event aliasesRowChangeEventHandler aliasesRowDeleting;
            
            public void AddaliasesRow(aliasesRow row) {
                this.Rows.Add(row);
            }
            
            public aliasesRow AddaliasesRow(encodingRow parentencodingRowByencoding_aliases) {
                aliasesRow rowaliasesRow = ((aliasesRow)(this.NewRow()));
                rowaliasesRow.ItemArray = new object[] {
                        null,
                        parentencodingRowByencoding_aliases[0]};
                this.Rows.Add(rowaliasesRow);
                return rowaliasesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                aliasesDataTable cln = ((aliasesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new aliasesDataTable();
            }
            
            internal void InitVars() {
                this.columnaliases_Id = this.Columns["aliases_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnaliases_Id = new DataColumn("aliases_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnaliases_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnaliases_Id}, true));
                this.columnaliases_Id.AutoIncrement = true;
                this.columnaliases_Id.AllowDBNull = false;
                this.columnaliases_Id.Unique = true;
            }
            
            public aliasesRow NewaliasesRow() {
                return ((aliasesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new aliasesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(aliasesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.aliasesRowChanged != null)) {
                    this.aliasesRowChanged(this, new aliasesRowChangeEvent(((aliasesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.aliasesRowChanging != null)) {
                    this.aliasesRowChanging(this, new aliasesRowChangeEvent(((aliasesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.aliasesRowDeleted != null)) {
                    this.aliasesRowDeleted(this, new aliasesRowChangeEvent(((aliasesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.aliasesRowDeleting != null)) {
                    this.aliasesRowDeleting(this, new aliasesRowChangeEvent(((aliasesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovealiasesRow(aliasesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class aliasesRow : DataRow {
            
            private aliasesDataTable tablealiases;
            
            internal aliasesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablealiases = ((aliasesDataTable)(this.Table));
            }
            
            public encodingRow encodingRow {
                get {
                    return ((encodingRow)(this.GetParentRow(this.Table.ParentRelations["encoding_aliases"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encoding_aliases"]);
                }
            }
            
            public aliasRow[] GetaliasRows() {
                return ((aliasRow[])(this.GetChildRows(this.Table.ChildRelations["aliases_alias"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class aliasesRowChangeEvent : EventArgs {
            
            private aliasesRow eventRow;
            
            private DataRowAction eventAction;
            
            public aliasesRowChangeEvent(aliasesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public aliasesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class aliasDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnaliases_Id;
            
            internal aliasDataTable() : 
                    base("alias") {
                this.InitClass();
            }
            
            internal aliasDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn aliases_IdColumn {
                get {
                    return this.columnaliases_Id;
                }
            }
            
            public aliasRow this[int index] {
                get {
                    return ((aliasRow)(this.Rows[index]));
                }
            }
            
            public event aliasRowChangeEventHandler aliasRowChanged;
            
            public event aliasRowChangeEventHandler aliasRowChanging;
            
            public event aliasRowChangeEventHandler aliasRowDeleted;
            
            public event aliasRowChangeEventHandler aliasRowDeleting;
            
            public void AddaliasRow(aliasRow row) {
                this.Rows.Add(row);
            }
            
            public aliasRow AddaliasRow(string name, aliasesRow parentaliasesRowByaliases_alias) {
                aliasRow rowaliasRow = ((aliasRow)(this.NewRow()));
                rowaliasRow.ItemArray = new object[] {
                        name,
                        parentaliasesRowByaliases_alias[0]};
                this.Rows.Add(rowaliasRow);
                return rowaliasRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                aliasDataTable cln = ((aliasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new aliasDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnaliases_Id = this.Columns["aliases_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnaliases_Id = new DataColumn("aliases_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnaliases_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
            }
            
            public aliasRow NewaliasRow() {
                return ((aliasRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new aliasRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(aliasRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.aliasRowChanged != null)) {
                    this.aliasRowChanged(this, new aliasRowChangeEvent(((aliasRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.aliasRowChanging != null)) {
                    this.aliasRowChanging(this, new aliasRowChangeEvent(((aliasRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.aliasRowDeleted != null)) {
                    this.aliasRowDeleted(this, new aliasRowChangeEvent(((aliasRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.aliasRowDeleting != null)) {
                    this.aliasRowDeleting(this, new aliasRowChangeEvent(((aliasRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovealiasRow(aliasRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class aliasRow : DataRow {
            
            private aliasDataTable tablealias;
            
            internal aliasRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablealias = ((aliasDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablealias.nameColumn]));
                }
                set {
                    this[this.tablealias.nameColumn] = value;
                }
            }
            
            public aliasesRow aliasesRow {
                get {
                    return ((aliasesRow)(this.GetParentRow(this.Table.ParentRelations["aliases_alias"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["aliases_alias"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class aliasRowChangeEvent : EventArgs {
            
            private aliasRow eventRow;
            
            private DataRowAction eventAction;
            
            public aliasRowChangeEvent(aliasRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public aliasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingPropertiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnencodingProperties_Id;
            
            private DataColumn columnname;
            
            internal encodingPropertiesDataTable() : 
                    base("encodingProperties") {
                this.InitClass();
            }
            
            internal encodingPropertiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn encodingProperties_IdColumn {
                get {
                    return this.columnencodingProperties_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public encodingPropertiesRow this[int index] {
                get {
                    return ((encodingPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event encodingPropertiesRowChangeEventHandler encodingPropertiesRowChanged;
            
            public event encodingPropertiesRowChangeEventHandler encodingPropertiesRowChanging;
            
            public event encodingPropertiesRowChangeEventHandler encodingPropertiesRowDeleted;
            
            public event encodingPropertiesRowChangeEventHandler encodingPropertiesRowDeleting;
            
            public void AddencodingPropertiesRow(encodingPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            public encodingPropertiesRow AddencodingPropertiesRow(encodingRow parentencodingRowByencoding_encodingProperties) {
                encodingPropertiesRow rowencodingPropertiesRow = ((encodingPropertiesRow)(this.NewRow()));
                rowencodingPropertiesRow.ItemArray = new object[] {
                        null,
                        parentencodingRowByencoding_encodingProperties[0]};
                this.Rows.Add(rowencodingPropertiesRow);
                return rowencodingPropertiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                encodingPropertiesDataTable cln = ((encodingPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new encodingPropertiesDataTable();
            }
            
            internal void InitVars() {
                this.columnencodingProperties_Id = this.Columns["encodingProperties_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnencodingProperties_Id = new DataColumn("encodingProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnencodingProperties_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnencodingProperties_Id}, true));
                this.columnencodingProperties_Id.AutoIncrement = true;
                this.columnencodingProperties_Id.AllowDBNull = false;
                this.columnencodingProperties_Id.Unique = true;
            }
            
            public encodingPropertiesRow NewencodingPropertiesRow() {
                return ((encodingPropertiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new encodingPropertiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(encodingPropertiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.encodingPropertiesRowChanged != null)) {
                    this.encodingPropertiesRowChanged(this, new encodingPropertiesRowChangeEvent(((encodingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.encodingPropertiesRowChanging != null)) {
                    this.encodingPropertiesRowChanging(this, new encodingPropertiesRowChangeEvent(((encodingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.encodingPropertiesRowDeleted != null)) {
                    this.encodingPropertiesRowDeleted(this, new encodingPropertiesRowChangeEvent(((encodingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.encodingPropertiesRowDeleting != null)) {
                    this.encodingPropertiesRowDeleting(this, new encodingPropertiesRowChangeEvent(((encodingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveencodingPropertiesRow(encodingPropertiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingPropertiesRow : DataRow {
            
            private encodingPropertiesDataTable tableencodingProperties;
            
            internal encodingPropertiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableencodingProperties = ((encodingPropertiesDataTable)(this.Table));
            }
            
            public encodingRow encodingRow {
                get {
                    return ((encodingRow)(this.GetParentRow(this.Table.ParentRelations["encoding_encodingProperties"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encoding_encodingProperties"]);
                }
            }
            
            public encodingPropertyRow[] GetencodingPropertyRows() {
                return ((encodingPropertyRow[])(this.GetChildRows(this.Table.ChildRelations["encodingProperties_encodingProperty"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingPropertiesRowChangeEvent : EventArgs {
            
            private encodingPropertiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public encodingPropertiesRowChangeEvent(encodingPropertiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public encodingPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingPropertyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnencodingProperty_Text;
            
            private DataColumn columnencodingProperties_Id;
            
            internal encodingPropertyDataTable() : 
                    base("encodingProperty") {
                this.InitClass();
            }
            
            internal encodingPropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn encodingProperty_TextColumn {
                get {
                    return this.columnencodingProperty_Text;
                }
            }
            
            internal DataColumn encodingProperties_IdColumn {
                get {
                    return this.columnencodingProperties_Id;
                }
            }
            
            public encodingPropertyRow this[int index] {
                get {
                    return ((encodingPropertyRow)(this.Rows[index]));
                }
            }
            
            public event encodingPropertyRowChangeEventHandler encodingPropertyRowChanged;
            
            public event encodingPropertyRowChangeEventHandler encodingPropertyRowChanging;
            
            public event encodingPropertyRowChangeEventHandler encodingPropertyRowDeleted;
            
            public event encodingPropertyRowChangeEventHandler encodingPropertyRowDeleting;
            
            public void AddencodingPropertyRow(encodingPropertyRow row) {
                this.Rows.Add(row);
            }
            
            public encodingPropertyRow AddencodingPropertyRow(string name, string encodingProperty_Text, encodingPropertiesRow parentencodingPropertiesRowByencodingProperties_encodingProperty) {
                encodingPropertyRow rowencodingPropertyRow = ((encodingPropertyRow)(this.NewRow()));
                rowencodingPropertyRow.ItemArray = new object[] {
                        name,
                        encodingProperty_Text,
                        parentencodingPropertiesRowByencodingProperties_encodingProperty[0]};
                this.Rows.Add(rowencodingPropertyRow);
                return rowencodingPropertyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                encodingPropertyDataTable cln = ((encodingPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new encodingPropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnencodingProperty_Text = this.Columns["encodingProperty_Text"];
                this.columnencodingProperties_Id = this.Columns["encodingProperties_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnencodingProperty_Text = new DataColumn("encodingProperty_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnencodingProperty_Text);
                this.columnencodingProperties_Id = new DataColumn("encodingProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnencodingProperties_Id);
                this.columnname.Namespace = "";
            }
            
            public encodingPropertyRow NewencodingPropertyRow() {
                return ((encodingPropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new encodingPropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(encodingPropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.encodingPropertyRowChanged != null)) {
                    this.encodingPropertyRowChanged(this, new encodingPropertyRowChangeEvent(((encodingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.encodingPropertyRowChanging != null)) {
                    this.encodingPropertyRowChanging(this, new encodingPropertyRowChangeEvent(((encodingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.encodingPropertyRowDeleted != null)) {
                    this.encodingPropertyRowDeleted(this, new encodingPropertyRowChangeEvent(((encodingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.encodingPropertyRowDeleting != null)) {
                    this.encodingPropertyRowDeleting(this, new encodingPropertyRowChangeEvent(((encodingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveencodingPropertyRow(encodingPropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingPropertyRow : DataRow {
            
            private encodingPropertyDataTable tableencodingProperty;
            
            internal encodingPropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableencodingProperty = ((encodingPropertyDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableencodingProperty.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableencodingProperty.nameColumn] = value;
                }
            }
            
            public string encodingProperty_Text {
                get {
                    try {
                        return ((string)(this[this.tableencodingProperty.encodingProperty_TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableencodingProperty.encodingProperty_TextColumn] = value;
                }
            }
            
            public encodingPropertiesRow encodingPropertiesRow {
                get {
                    return ((encodingPropertiesRow)(this.GetParentRow(this.Table.ParentRelations["encodingProperties_encodingProperty"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encodingProperties_encodingProperty"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tableencodingProperty.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tableencodingProperty.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsencodingProperty_TextNull() {
                return this.IsNull(this.tableencodingProperty.encodingProperty_TextColumn);
            }
            
            public void SetencodingProperty_TextNull() {
                this[this.tableencodingProperty.encodingProperty_TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class encodingPropertyRowChangeEvent : EventArgs {
            
            private encodingPropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public encodingPropertyRowChangeEvent(encodingPropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public encodingPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class rangeCoverageDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnrangeCoverage_Text;
            
            private DataColumn columnname;
            
            internal rangeCoverageDataTable() : 
                    base("rangeCoverage") {
                this.InitClass();
            }
            
            internal rangeCoverageDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn rangeCoverage_TextColumn {
                get {
                    return this.columnrangeCoverage_Text;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public rangeCoverageRow this[int index] {
                get {
                    return ((rangeCoverageRow)(this.Rows[index]));
                }
            }
            
            public event rangeCoverageRowChangeEventHandler rangeCoverageRowChanged;
            
            public event rangeCoverageRowChangeEventHandler rangeCoverageRowChanging;
            
            public event rangeCoverageRowChangeEventHandler rangeCoverageRowDeleted;
            
            public event rangeCoverageRowChangeEventHandler rangeCoverageRowDeleting;
            
            public void AddrangeCoverageRow(rangeCoverageRow row) {
                this.Rows.Add(row);
            }
            
            public rangeCoverageRow AddrangeCoverageRow(string rangeCoverage_Text, encodingRow parentencodingRowByencoding_rangeCoverage) {
                rangeCoverageRow rowrangeCoverageRow = ((rangeCoverageRow)(this.NewRow()));
                rowrangeCoverageRow.ItemArray = new object[] {
                        rangeCoverage_Text,
                        parentencodingRowByencoding_rangeCoverage[0]};
                this.Rows.Add(rowrangeCoverageRow);
                return rowrangeCoverageRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                rangeCoverageDataTable cln = ((rangeCoverageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new rangeCoverageDataTable();
            }
            
            internal void InitVars() {
                this.columnrangeCoverage_Text = this.Columns["rangeCoverage_Text"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnrangeCoverage_Text = new DataColumn("rangeCoverage_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnrangeCoverage_Text);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.columnrangeCoverage_Text.AllowDBNull = false;
            }
            
            public rangeCoverageRow NewrangeCoverageRow() {
                return ((rangeCoverageRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new rangeCoverageRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(rangeCoverageRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.rangeCoverageRowChanged != null)) {
                    this.rangeCoverageRowChanged(this, new rangeCoverageRowChangeEvent(((rangeCoverageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.rangeCoverageRowChanging != null)) {
                    this.rangeCoverageRowChanging(this, new rangeCoverageRowChangeEvent(((rangeCoverageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.rangeCoverageRowDeleted != null)) {
                    this.rangeCoverageRowDeleted(this, new rangeCoverageRowChangeEvent(((rangeCoverageRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.rangeCoverageRowDeleting != null)) {
                    this.rangeCoverageRowDeleting(this, new rangeCoverageRowChangeEvent(((rangeCoverageRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoverangeCoverageRow(rangeCoverageRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class rangeCoverageRow : DataRow {
            
            private rangeCoverageDataTable tablerangeCoverage;
            
            internal rangeCoverageRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablerangeCoverage = ((rangeCoverageDataTable)(this.Table));
            }
            
            public string rangeCoverage_Text {
                get {
                    return ((string)(this[this.tablerangeCoverage.rangeCoverage_TextColumn]));
                }
                set {
                    this[this.tablerangeCoverage.rangeCoverage_TextColumn] = value;
                }
            }
            
            public encodingRow encodingRow {
                get {
                    return ((encodingRow)(this.GetParentRow(this.Table.ParentRelations["encoding_rangeCoverage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["encoding_rangeCoverage"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class rangeCoverageRowChangeEvent : EventArgs {
            
            private rangeCoverageRow eventRow;
            
            private DataRowAction eventAction;
            
            public rangeCoverageRowChangeEvent(rangeCoverageRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public rangeCoverageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmappings_Id;
            
            internal mappingsDataTable() : 
                    base("mappings") {
                this.InitClass();
            }
            
            internal mappingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn mappings_IdColumn {
                get {
                    return this.columnmappings_Id;
                }
            }
            
            public mappingsRow this[int index] {
                get {
                    return ((mappingsRow)(this.Rows[index]));
                }
            }
            
            public event mappingsRowChangeEventHandler mappingsRowChanged;
            
            public event mappingsRowChangeEventHandler mappingsRowChanging;
            
            public event mappingsRowChangeEventHandler mappingsRowDeleted;
            
            public event mappingsRowChangeEventHandler mappingsRowDeleting;
            
            public void AddmappingsRow(mappingsRow row) {
                this.Rows.Add(row);
            }
            
            public mappingsRow AddmappingsRow() {
                mappingsRow rowmappingsRow = ((mappingsRow)(this.NewRow()));
                rowmappingsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowmappingsRow);
                return rowmappingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                mappingsDataTable cln = ((mappingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new mappingsDataTable();
            }
            
            internal void InitVars() {
                this.columnmappings_Id = this.Columns["mappings_Id"];
            }
            
            private void InitClass() {
                this.columnmappings_Id = new DataColumn("mappings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnmappings_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnmappings_Id}, true));
                this.columnmappings_Id.AutoIncrement = true;
                this.columnmappings_Id.AllowDBNull = false;
                this.columnmappings_Id.Unique = true;
            }
            
            public mappingsRow NewmappingsRow() {
                return ((mappingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new mappingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(mappingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mappingsRowChanged != null)) {
                    this.mappingsRowChanged(this, new mappingsRowChangeEvent(((mappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mappingsRowChanging != null)) {
                    this.mappingsRowChanging(this, new mappingsRowChangeEvent(((mappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mappingsRowDeleted != null)) {
                    this.mappingsRowDeleted(this, new mappingsRowChangeEvent(((mappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mappingsRowDeleting != null)) {
                    this.mappingsRowDeleting(this, new mappingsRowChangeEvent(((mappingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemappingsRow(mappingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingsRow : DataRow {
            
            private mappingsDataTable tablemappings;
            
            internal mappingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemappings = ((mappingsDataTable)(this.Table));
            }
            
            public mappingRow[] GetmappingRows() {
                return ((mappingRow[])(this.GetChildRows(this.Table.ChildRelations["mappings_mapping"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingsRowChangeEvent : EventArgs {
            
            private mappingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public mappingsRowChangeEvent(mappingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public mappingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnleftType;
            
            private DataColumn columnrightType;
            
            private DataColumn columnmappings_Id;
            
            internal mappingDataTable() : 
                    base("mapping") {
                this.InitClass();
            }
            
            internal mappingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn leftTypeColumn {
                get {
                    return this.columnleftType;
                }
            }
            
            internal DataColumn rightTypeColumn {
                get {
                    return this.columnrightType;
                }
            }
            
            internal DataColumn mappings_IdColumn {
                get {
                    return this.columnmappings_Id;
                }
            }
            
            public mappingRow this[int index] {
                get {
                    return ((mappingRow)(this.Rows[index]));
                }
            }
            
            public event mappingRowChangeEventHandler mappingRowChanged;
            
            public event mappingRowChangeEventHandler mappingRowChanging;
            
            public event mappingRowChangeEventHandler mappingRowDeleted;
            
            public event mappingRowChangeEventHandler mappingRowDeleting;
            
            public void AddmappingRow(mappingRow row) {
                this.Rows.Add(row);
            }
            
            public mappingRow AddmappingRow(string name, string leftType, string rightType, mappingsRow parentmappingsRowBymappings_mapping) {
                mappingRow rowmappingRow = ((mappingRow)(this.NewRow()));
                rowmappingRow.ItemArray = new object[] {
                        name,
                        leftType,
                        rightType,
                        parentmappingsRowBymappings_mapping[0]};
                this.Rows.Add(rowmappingRow);
                return rowmappingRow;
            }
            
            public mappingRow FindByname(string name) {
                return ((mappingRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                mappingDataTable cln = ((mappingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new mappingDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnleftType = this.Columns["leftType"];
                this.columnrightType = this.Columns["rightType"];
                this.columnmappings_Id = this.Columns["mappings_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnleftType = new DataColumn("leftType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnleftType);
                this.columnrightType = new DataColumn("rightType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnrightType);
                this.columnmappings_Id = new DataColumn("mappings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnmappings_Id);
                this.Constraints.Add(new UniqueConstraint("mappingKey", new DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
                this.columnleftType.Namespace = "";
                this.columnleftType.DefaultValue = "bytes";
                this.columnrightType.Namespace = "";
                this.columnrightType.DefaultValue = "unicode";
            }
            
            public mappingRow NewmappingRow() {
                return ((mappingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new mappingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(mappingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mappingRowChanged != null)) {
                    this.mappingRowChanged(this, new mappingRowChangeEvent(((mappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mappingRowChanging != null)) {
                    this.mappingRowChanging(this, new mappingRowChangeEvent(((mappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mappingRowDeleted != null)) {
                    this.mappingRowDeleted(this, new mappingRowChangeEvent(((mappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mappingRowDeleting != null)) {
                    this.mappingRowDeleting(this, new mappingRowChangeEvent(((mappingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemappingRow(mappingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingRow : DataRow {
            
            private mappingDataTable tablemapping;
            
            internal mappingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemapping = ((mappingDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablemapping.nameColumn]));
                }
                set {
                    this[this.tablemapping.nameColumn] = value;
                }
            }
            
            public string leftType {
                get {
                    try {
                        return ((string)(this[this.tablemapping.leftTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemapping.leftTypeColumn] = value;
                }
            }
            
            public string rightType {
                get {
                    try {
                        return ((string)(this[this.tablemapping.rightTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemapping.rightTypeColumn] = value;
                }
            }
            
            public mappingsRow mappingsRow {
                get {
                    return ((mappingsRow)(this.GetParentRow(this.Table.ParentRelations["mappings_mapping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mappings_mapping"]);
                }
            }
            
            public bool IsleftTypeNull() {
                return this.IsNull(this.tablemapping.leftTypeColumn);
            }
            
            public void SetleftTypeNull() {
                this[this.tablemapping.leftTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsrightTypeNull() {
                return this.IsNull(this.tablemapping.rightTypeColumn);
            }
            
            public void SetrightTypeNull() {
                this[this.tablemapping.rightTypeColumn] = System.Convert.DBNull;
            }
            
            public uiNamesRow[] GetuiNamesRows() {
                return ((uiNamesRow[])(this.GetChildRows(this.Table.ChildRelations["mapping_uiNames"])));
            }
            
            public specsRow[] GetspecsRows() {
                return ((specsRow[])(this.GetChildRows(this.Table.ChildRelations["mapping_specs"])));
            }
            
            public mappingPropertiesRow[] GetmappingPropertiesRows() {
                return ((mappingPropertiesRow[])(this.GetChildRows(this.Table.ChildRelations["mapping_mappingProperties"])));
            }
            
            public fontMappingsRow[] GetfontMappingsRows() {
                return ((fontMappingsRow[])(this.GetChildRows(this.Table.ChildRelations["mapping_fontMappings"])));
            }
            
            public defineMappingRow[] GetdefineMappingRows() {
                return ((defineMappingRow[])(this.GetChildRows(this.Table.ChildRelations["defineMappingRef"])));
            }
            
            public encodingMappingRow[] GetencodingMappingRows() {
                return ((encodingMappingRow[])(this.GetChildRows(this.Table.ChildRelations["encodingMappingRef"])));
            }
            
            public stepRow[] GetstepRows() {
                return ((stepRow[])(this.GetChildRows(this.Table.ChildRelations["mappingStep"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingRowChangeEvent : EventArgs {
            
            private mappingRow eventRow;
            
            private DataRowAction eventAction;
            
            public mappingRowChangeEvent(mappingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public mappingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class uiNamesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiNames_Id;
            
            private DataColumn columnname;
            
            internal uiNamesDataTable() : 
                    base("uiNames") {
                this.InitClass();
            }
            
            internal uiNamesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiNames_IdColumn {
                get {
                    return this.columnuiNames_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public uiNamesRow this[int index] {
                get {
                    return ((uiNamesRow)(this.Rows[index]));
                }
            }
            
            public event uiNamesRowChangeEventHandler uiNamesRowChanged;
            
            public event uiNamesRowChangeEventHandler uiNamesRowChanging;
            
            public event uiNamesRowChangeEventHandler uiNamesRowDeleted;
            
            public event uiNamesRowChangeEventHandler uiNamesRowDeleting;
            
            public void AdduiNamesRow(uiNamesRow row) {
                this.Rows.Add(row);
            }
            
            public uiNamesRow AdduiNamesRow(mappingRow parentmappingRowBymapping_uiNames) {
                uiNamesRow rowuiNamesRow = ((uiNamesRow)(this.NewRow()));
                rowuiNamesRow.ItemArray = new object[] {
                        null,
                        parentmappingRowBymapping_uiNames[0]};
                this.Rows.Add(rowuiNamesRow);
                return rowuiNamesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                uiNamesDataTable cln = ((uiNamesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new uiNamesDataTable();
            }
            
            internal void InitVars() {
                this.columnuiNames_Id = this.Columns["uiNames_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnuiNames_Id = new DataColumn("uiNames_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnuiNames_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnuiNames_Id}, true));
                this.columnuiNames_Id.AutoIncrement = true;
                this.columnuiNames_Id.AllowDBNull = false;
                this.columnuiNames_Id.Unique = true;
            }
            
            public uiNamesRow NewuiNamesRow() {
                return ((uiNamesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new uiNamesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(uiNamesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.uiNamesRowChanged != null)) {
                    this.uiNamesRowChanged(this, new uiNamesRowChangeEvent(((uiNamesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.uiNamesRowChanging != null)) {
                    this.uiNamesRowChanging(this, new uiNamesRowChangeEvent(((uiNamesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.uiNamesRowDeleted != null)) {
                    this.uiNamesRowDeleted(this, new uiNamesRowChangeEvent(((uiNamesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.uiNamesRowDeleting != null)) {
                    this.uiNamesRowDeleting(this, new uiNamesRowChangeEvent(((uiNamesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveuiNamesRow(uiNamesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class uiNamesRow : DataRow {
            
            private uiNamesDataTable tableuiNames;
            
            internal uiNamesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableuiNames = ((uiNamesDataTable)(this.Table));
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["mapping_uiNames"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mapping_uiNames"]);
                }
            }
            
            public uiNameRow[] GetuiNameRows() {
                return ((uiNameRow[])(this.GetChildRows(this.Table.ChildRelations["uiNames_uiName"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class uiNamesRowChangeEvent : EventArgs {
            
            private uiNamesRow eventRow;
            
            private DataRowAction eventAction;
            
            public uiNamesRowChangeEvent(uiNamesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public uiNamesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class uiNameDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnlang;
            
            private DataColumn columnuiName_text;
            
            private DataColumn columnuiNames_Id;
            
            internal uiNameDataTable() : 
                    base("uiName") {
                this.InitClass();
            }
            
            internal uiNameDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn langColumn {
                get {
                    return this.columnlang;
                }
            }
            
            internal DataColumn uiName_textColumn {
                get {
                    return this.columnuiName_text;
                }
            }
            
            internal DataColumn uiNames_IdColumn {
                get {
                    return this.columnuiNames_Id;
                }
            }
            
            public uiNameRow this[int index] {
                get {
                    return ((uiNameRow)(this.Rows[index]));
                }
            }
            
            public event uiNameRowChangeEventHandler uiNameRowChanged;
            
            public event uiNameRowChangeEventHandler uiNameRowChanging;
            
            public event uiNameRowChangeEventHandler uiNameRowDeleted;
            
            public event uiNameRowChangeEventHandler uiNameRowDeleting;
            
            public void AdduiNameRow(uiNameRow row) {
                this.Rows.Add(row);
            }
            
            public uiNameRow AdduiNameRow(string lang, string uiName_text, uiNamesRow parentuiNamesRowByuiNames_uiName) {
                uiNameRow rowuiNameRow = ((uiNameRow)(this.NewRow()));
                rowuiNameRow.ItemArray = new object[] {
                        lang,
                        uiName_text,
                        parentuiNamesRowByuiNames_uiName[0]};
                this.Rows.Add(rowuiNameRow);
                return rowuiNameRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                uiNameDataTable cln = ((uiNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new uiNameDataTable();
            }
            
            internal void InitVars() {
                this.columnlang = this.Columns["lang"];
                this.columnuiName_text = this.Columns["uiName_text"];
                this.columnuiNames_Id = this.Columns["uiNames_Id"];
            }
            
            private void InitClass() {
                this.columnlang = new DataColumn("lang", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnlang);
                this.columnuiName_text = new DataColumn("uiName_text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnuiName_text);
                this.columnuiNames_Id = new DataColumn("uiNames_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnuiNames_Id);
                this.columnlang.AllowDBNull = false;
                this.columnlang.Namespace = "http://www.w3.org/XML/1998/namespace";
                this.columnuiName_text.AllowDBNull = false;
            }
            
            public uiNameRow NewuiNameRow() {
                return ((uiNameRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new uiNameRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(uiNameRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.uiNameRowChanged != null)) {
                    this.uiNameRowChanged(this, new uiNameRowChangeEvent(((uiNameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.uiNameRowChanging != null)) {
                    this.uiNameRowChanging(this, new uiNameRowChangeEvent(((uiNameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.uiNameRowDeleted != null)) {
                    this.uiNameRowDeleted(this, new uiNameRowChangeEvent(((uiNameRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.uiNameRowDeleting != null)) {
                    this.uiNameRowDeleting(this, new uiNameRowChangeEvent(((uiNameRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveuiNameRow(uiNameRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class uiNameRow : DataRow {
            
            private uiNameDataTable tableuiName;
            
            internal uiNameRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableuiName = ((uiNameDataTable)(this.Table));
            }
            
            public string lang {
                get {
                    return ((string)(this[this.tableuiName.langColumn]));
                }
                set {
                    this[this.tableuiName.langColumn] = value;
                }
            }
            
            public string uiName_text {
                get {
                    return ((string)(this[this.tableuiName.uiName_textColumn]));
                }
                set {
                    this[this.tableuiName.uiName_textColumn] = value;
                }
            }
            
            public uiNamesRow uiNamesRow {
                get {
                    return ((uiNamesRow)(this.GetParentRow(this.Table.ParentRelations["uiNames_uiName"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["uiNames_uiName"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class uiNameRowChangeEvent : EventArgs {
            
            private uiNameRow eventRow;
            
            private DataRowAction eventAction;
            
            public uiNameRowChangeEvent(uiNameRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public uiNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnspecs_Id;
            
            private DataColumn columnname;
            
            internal specsDataTable() : 
                    base("specs") {
                this.InitClass();
            }
            
            internal specsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn specs_IdColumn {
                get {
                    return this.columnspecs_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public specsRow this[int index] {
                get {
                    return ((specsRow)(this.Rows[index]));
                }
            }
            
            public event specsRowChangeEventHandler specsRowChanged;
            
            public event specsRowChangeEventHandler specsRowChanging;
            
            public event specsRowChangeEventHandler specsRowDeleted;
            
            public event specsRowChangeEventHandler specsRowDeleting;
            
            public void AddspecsRow(specsRow row) {
                this.Rows.Add(row);
            }
            
            public specsRow AddspecsRow(mappingRow parentmappingRowBymapping_specs) {
                specsRow rowspecsRow = ((specsRow)(this.NewRow()));
                rowspecsRow.ItemArray = new object[] {
                        null,
                        parentmappingRowBymapping_specs[0]};
                this.Rows.Add(rowspecsRow);
                return rowspecsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                specsDataTable cln = ((specsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new specsDataTable();
            }
            
            internal void InitVars() {
                this.columnspecs_Id = this.Columns["specs_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnspecs_Id = new DataColumn("specs_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspecs_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnspecs_Id}, true));
                this.columnspecs_Id.AutoIncrement = true;
                this.columnspecs_Id.AllowDBNull = false;
                this.columnspecs_Id.Unique = true;
            }
            
            public specsRow NewspecsRow() {
                return ((specsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new specsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(specsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.specsRowChanged != null)) {
                    this.specsRowChanged(this, new specsRowChangeEvent(((specsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.specsRowChanging != null)) {
                    this.specsRowChanging(this, new specsRowChangeEvent(((specsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.specsRowDeleted != null)) {
                    this.specsRowDeleted(this, new specsRowChangeEvent(((specsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.specsRowDeleting != null)) {
                    this.specsRowDeleting(this, new specsRowChangeEvent(((specsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovespecsRow(specsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specsRow : DataRow {
            
            private specsDataTable tablespecs;
            
            internal specsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablespecs = ((specsDataTable)(this.Table));
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["mapping_specs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mapping_specs"]);
                }
            }
            
            public specRow[] GetspecRows() {
                return ((specRow[])(this.GetChildRows(this.Table.ChildRelations["specs_spec"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specsRowChangeEvent : EventArgs {
            
            private specsRow eventRow;
            
            private DataRowAction eventAction;
            
            public specsRowChangeEvent(specsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public specsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntype;
            
            private DataColumn columnpath;
            
            private DataColumn columndirection;
            
            private DataColumn columnspec_Id;
            
            private DataColumn columnspecs_Id;
            
            internal specDataTable() : 
                    base("spec") {
                this.InitClass();
            }
            
            internal specDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn pathColumn {
                get {
                    return this.columnpath;
                }
            }
            
            internal DataColumn directionColumn {
                get {
                    return this.columndirection;
                }
            }
            
            internal DataColumn spec_IdColumn {
                get {
                    return this.columnspec_Id;
                }
            }
            
            internal DataColumn specs_IdColumn {
                get {
                    return this.columnspecs_Id;
                }
            }
            
            public specRow this[int index] {
                get {
                    return ((specRow)(this.Rows[index]));
                }
            }
            
            public event specRowChangeEventHandler specRowChanged;
            
            public event specRowChangeEventHandler specRowChanging;
            
            public event specRowChangeEventHandler specRowDeleted;
            
            public event specRowChangeEventHandler specRowDeleting;
            
            public void AddspecRow(specRow row) {
                this.Rows.Add(row);
            }
            
            public specRow AddspecRow(string type, string path, string direction, specsRow parentspecsRowByspecs_spec) {
                specRow rowspecRow = ((specRow)(this.NewRow()));
                rowspecRow.ItemArray = new object[] {
                        type,
                        path,
                        direction,
                        null,
                        parentspecsRowByspecs_spec[0]};
                this.Rows.Add(rowspecRow);
                return rowspecRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                specDataTable cln = ((specDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new specDataTable();
            }
            
            internal void InitVars() {
                this.columntype = this.Columns["type"];
                this.columnpath = this.Columns["path"];
                this.columndirection = this.Columns["direction"];
                this.columnspec_Id = this.Columns["spec_Id"];
                this.columnspecs_Id = this.Columns["specs_Id"];
            }
            
            private void InitClass() {
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columnpath = new DataColumn("path", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnpath);
                this.columndirection = new DataColumn("direction", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columndirection);
                this.columnspec_Id = new DataColumn("spec_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspec_Id);
                this.columnspecs_Id = new DataColumn("specs_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspecs_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnspec_Id}, true));
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columnpath.Namespace = "";
                this.columnpath.DefaultValue = "";
                this.columndirection.Namespace = "";
                this.columndirection.DefaultValue = "both";
                this.columnspec_Id.AutoIncrement = true;
                this.columnspec_Id.AllowDBNull = false;
                this.columnspec_Id.Unique = true;
            }
            
            public specRow NewspecRow() {
                return ((specRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new specRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(specRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.specRowChanged != null)) {
                    this.specRowChanged(this, new specRowChangeEvent(((specRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.specRowChanging != null)) {
                    this.specRowChanging(this, new specRowChangeEvent(((specRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.specRowDeleted != null)) {
                    this.specRowDeleted(this, new specRowChangeEvent(((specRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.specRowDeleting != null)) {
                    this.specRowDeleting(this, new specRowChangeEvent(((specRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovespecRow(specRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specRow : DataRow {
            
            private specDataTable tablespec;
            
            internal specRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablespec = ((specDataTable)(this.Table));
            }
            
            public string type {
                get {
                    return ((string)(this[this.tablespec.typeColumn]));
                }
                set {
                    this[this.tablespec.typeColumn] = value;
                }
            }
            
            public string path {
                get {
                    try {
                        return ((string)(this[this.tablespec.pathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespec.pathColumn] = value;
                }
            }
            
            public string direction {
                get {
                    try {
                        return ((string)(this[this.tablespec.directionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespec.directionColumn] = value;
                }
            }
            
            public specsRow specsRow {
                get {
                    return ((specsRow)(this.GetParentRow(this.Table.ParentRelations["specs_spec"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["specs_spec"]);
                }
            }
            
            public bool IspathNull() {
                return this.IsNull(this.tablespec.pathColumn);
            }
            
            public void SetpathNull() {
                this[this.tablespec.pathColumn] = System.Convert.DBNull;
            }
            
            public bool IsdirectionNull() {
                return this.IsNull(this.tablespec.directionColumn);
            }
            
            public void SetdirectionNull() {
                this[this.tablespec.directionColumn] = System.Convert.DBNull;
            }
            
            public stepsRow[] GetstepsRows() {
                return ((stepsRow[])(this.GetChildRows(this.Table.ChildRelations["spec_steps"])));
            }
            
            public specPropertiesRow[] GetspecPropertiesRows() {
                return ((specPropertiesRow[])(this.GetChildRows(this.Table.ChildRelations["spec_specProperties"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specRowChangeEvent : EventArgs {
            
            private specRow eventRow;
            
            private DataRowAction eventAction;
            
            public specRowChangeEvent(specRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public specRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stepsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnsteps_Id;
            
            private DataColumn columnspec_Id;
            
            internal stepsDataTable() : 
                    base("steps") {
                this.InitClass();
            }
            
            internal stepsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn steps_IdColumn {
                get {
                    return this.columnsteps_Id;
                }
            }
            
            internal DataColumn spec_IdColumn {
                get {
                    return this.columnspec_Id;
                }
            }
            
            public stepsRow this[int index] {
                get {
                    return ((stepsRow)(this.Rows[index]));
                }
            }
            
            public event stepsRowChangeEventHandler stepsRowChanged;
            
            public event stepsRowChangeEventHandler stepsRowChanging;
            
            public event stepsRowChangeEventHandler stepsRowDeleted;
            
            public event stepsRowChangeEventHandler stepsRowDeleting;
            
            public void AddstepsRow(stepsRow row) {
                this.Rows.Add(row);
            }
            
            public stepsRow AddstepsRow(specRow parentspecRowByspec_steps) {
                stepsRow rowstepsRow = ((stepsRow)(this.NewRow()));
                rowstepsRow.ItemArray = new object[] {
                        null,
                        parentspecRowByspec_steps[3]};
                this.Rows.Add(rowstepsRow);
                return rowstepsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                stepsDataTable cln = ((stepsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new stepsDataTable();
            }
            
            internal void InitVars() {
                this.columnsteps_Id = this.Columns["steps_Id"];
                this.columnspec_Id = this.Columns["spec_Id"];
            }
            
            private void InitClass() {
                this.columnsteps_Id = new DataColumn("steps_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnsteps_Id);
                this.columnspec_Id = new DataColumn("spec_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspec_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnsteps_Id}, true));
                this.columnsteps_Id.AutoIncrement = true;
                this.columnsteps_Id.AllowDBNull = false;
                this.columnsteps_Id.Unique = true;
            }
            
            public stepsRow NewstepsRow() {
                return ((stepsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new stepsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(stepsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.stepsRowChanged != null)) {
                    this.stepsRowChanged(this, new stepsRowChangeEvent(((stepsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.stepsRowChanging != null)) {
                    this.stepsRowChanging(this, new stepsRowChangeEvent(((stepsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.stepsRowDeleted != null)) {
                    this.stepsRowDeleted(this, new stepsRowChangeEvent(((stepsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.stepsRowDeleting != null)) {
                    this.stepsRowDeleting(this, new stepsRowChangeEvent(((stepsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovestepsRow(stepsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stepsRow : DataRow {
            
            private stepsDataTable tablesteps;
            
            internal stepsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablesteps = ((stepsDataTable)(this.Table));
            }
            
            public specRow specRow {
                get {
                    return ((specRow)(this.GetParentRow(this.Table.ParentRelations["spec_steps"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spec_steps"]);
                }
            }
            
            public stepRow[] GetstepRows() {
                return ((stepRow[])(this.GetChildRows(this.Table.ChildRelations["steps_step"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stepsRowChangeEvent : EventArgs {
            
            private stepsRow eventRow;
            
            private DataRowAction eventAction;
            
            public stepsRowChangeEvent(stepsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public stepsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stepDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnreverse;
            
            private DataColumn columnnormalize;
            
            private DataColumn columnsteps_Id;
            
            internal stepDataTable() : 
                    base("step") {
                this.InitClass();
            }
            
            internal stepDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn reverseColumn {
                get {
                    return this.columnreverse;
                }
            }
            
            internal DataColumn normalizeColumn {
                get {
                    return this.columnnormalize;
                }
            }
            
            internal DataColumn steps_IdColumn {
                get {
                    return this.columnsteps_Id;
                }
            }
            
            public stepRow this[int index] {
                get {
                    return ((stepRow)(this.Rows[index]));
                }
            }
            
            public event stepRowChangeEventHandler stepRowChanged;
            
            public event stepRowChangeEventHandler stepRowChanging;
            
            public event stepRowChangeEventHandler stepRowDeleted;
            
            public event stepRowChangeEventHandler stepRowDeleting;
            
            public void AddstepRow(stepRow row) {
                this.Rows.Add(row);
            }
            
            public stepRow AddstepRow(mappingRow parentmappingRowBymappingStep, bool reverse, string normalize, stepsRow parentstepsRowBysteps_step) {
                stepRow rowstepRow = ((stepRow)(this.NewRow()));
                rowstepRow.ItemArray = new object[] {
                        parentmappingRowBymappingStep[0],
                        reverse,
                        normalize,
                        parentstepsRowBysteps_step[0]};
                this.Rows.Add(rowstepRow);
                return rowstepRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                stepDataTable cln = ((stepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new stepDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnreverse = this.Columns["reverse"];
                this.columnnormalize = this.Columns["normalize"];
                this.columnsteps_Id = this.Columns["steps_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnreverse = new DataColumn("reverse", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnreverse);
                this.columnnormalize = new DataColumn("normalize", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnnormalize);
                this.columnsteps_Id = new DataColumn("steps_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnsteps_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnreverse.Namespace = "";
                this.columnreverse.DefaultValue = false;
                this.columnnormalize.Namespace = "";
                this.columnnormalize.DefaultValue = "none";
            }
            
            public stepRow NewstepRow() {
                return ((stepRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new stepRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(stepRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.stepRowChanged != null)) {
                    this.stepRowChanged(this, new stepRowChangeEvent(((stepRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.stepRowChanging != null)) {
                    this.stepRowChanging(this, new stepRowChangeEvent(((stepRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.stepRowDeleted != null)) {
                    this.stepRowDeleted(this, new stepRowChangeEvent(((stepRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.stepRowDeleting != null)) {
                    this.stepRowDeleting(this, new stepRowChangeEvent(((stepRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovestepRow(stepRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stepRow : DataRow {
            
            private stepDataTable tablestep;
            
            internal stepRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablestep = ((stepDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablestep.nameColumn]));
                }
                set {
                    this[this.tablestep.nameColumn] = value;
                }
            }
            
            public bool reverse {
                get {
                    try {
                        return ((bool)(this[this.tablestep.reverseColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestep.reverseColumn] = value;
                }
            }
            
            public string normalize {
                get {
                    try {
                        return ((string)(this[this.tablestep.normalizeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablestep.normalizeColumn] = value;
                }
            }
            
            public stepsRow stepsRow {
                get {
                    return ((stepsRow)(this.GetParentRow(this.Table.ParentRelations["steps_step"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["steps_step"]);
                }
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["mappingStep"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mappingStep"]);
                }
            }
            
            public bool IsreverseNull() {
                return this.IsNull(this.tablestep.reverseColumn);
            }
            
            public void SetreverseNull() {
                this[this.tablestep.reverseColumn] = System.Convert.DBNull;
            }
            
            public bool IsnormalizeNull() {
                return this.IsNull(this.tablestep.normalizeColumn);
            }
            
            public void SetnormalizeNull() {
                this[this.tablestep.normalizeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class stepRowChangeEvent : EventArgs {
            
            private stepRow eventRow;
            
            private DataRowAction eventAction;
            
            public stepRowChangeEvent(stepRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public stepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specPropertiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnspecProperties_Id;
            
            private DataColumn columnspec_Id;
            
            internal specPropertiesDataTable() : 
                    base("specProperties") {
                this.InitClass();
            }
            
            internal specPropertiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn specProperties_IdColumn {
                get {
                    return this.columnspecProperties_Id;
                }
            }
            
            internal DataColumn spec_IdColumn {
                get {
                    return this.columnspec_Id;
                }
            }
            
            public specPropertiesRow this[int index] {
                get {
                    return ((specPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event specPropertiesRowChangeEventHandler specPropertiesRowChanged;
            
            public event specPropertiesRowChangeEventHandler specPropertiesRowChanging;
            
            public event specPropertiesRowChangeEventHandler specPropertiesRowDeleted;
            
            public event specPropertiesRowChangeEventHandler specPropertiesRowDeleting;
            
            public void AddspecPropertiesRow(specPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            public specPropertiesRow AddspecPropertiesRow(specRow parentspecRowByspec_specProperties) {
                specPropertiesRow rowspecPropertiesRow = ((specPropertiesRow)(this.NewRow()));
                rowspecPropertiesRow.ItemArray = new object[] {
                        null,
                        parentspecRowByspec_specProperties[3]};
                this.Rows.Add(rowspecPropertiesRow);
                return rowspecPropertiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                specPropertiesDataTable cln = ((specPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new specPropertiesDataTable();
            }
            
            internal void InitVars() {
                this.columnspecProperties_Id = this.Columns["specProperties_Id"];
                this.columnspec_Id = this.Columns["spec_Id"];
            }
            
            private void InitClass() {
                this.columnspecProperties_Id = new DataColumn("specProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspecProperties_Id);
                this.columnspec_Id = new DataColumn("spec_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspec_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnspecProperties_Id}, true));
                this.columnspecProperties_Id.AutoIncrement = true;
                this.columnspecProperties_Id.AllowDBNull = false;
                this.columnspecProperties_Id.Unique = true;
            }
            
            public specPropertiesRow NewspecPropertiesRow() {
                return ((specPropertiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new specPropertiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(specPropertiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.specPropertiesRowChanged != null)) {
                    this.specPropertiesRowChanged(this, new specPropertiesRowChangeEvent(((specPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.specPropertiesRowChanging != null)) {
                    this.specPropertiesRowChanging(this, new specPropertiesRowChangeEvent(((specPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.specPropertiesRowDeleted != null)) {
                    this.specPropertiesRowDeleted(this, new specPropertiesRowChangeEvent(((specPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.specPropertiesRowDeleting != null)) {
                    this.specPropertiesRowDeleting(this, new specPropertiesRowChangeEvent(((specPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovespecPropertiesRow(specPropertiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specPropertiesRow : DataRow {
            
            private specPropertiesDataTable tablespecProperties;
            
            internal specPropertiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablespecProperties = ((specPropertiesDataTable)(this.Table));
            }
            
            public specRow specRow {
                get {
                    return ((specRow)(this.GetParentRow(this.Table.ParentRelations["spec_specProperties"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["spec_specProperties"]);
                }
            }
            
            public specPropertyRow[] GetspecPropertyRows() {
                return ((specPropertyRow[])(this.GetChildRows(this.Table.ChildRelations["specProperties_specProperty"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specPropertiesRowChangeEvent : EventArgs {
            
            private specPropertiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public specPropertiesRowChangeEvent(specPropertiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public specPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specPropertyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnspecProperty_Text;
            
            private DataColumn columnspecProperties_Id;
            
            internal specPropertyDataTable() : 
                    base("specProperty") {
                this.InitClass();
            }
            
            internal specPropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn specProperty_TextColumn {
                get {
                    return this.columnspecProperty_Text;
                }
            }
            
            internal DataColumn specProperties_IdColumn {
                get {
                    return this.columnspecProperties_Id;
                }
            }
            
            public specPropertyRow this[int index] {
                get {
                    return ((specPropertyRow)(this.Rows[index]));
                }
            }
            
            public event specPropertyRowChangeEventHandler specPropertyRowChanged;
            
            public event specPropertyRowChangeEventHandler specPropertyRowChanging;
            
            public event specPropertyRowChangeEventHandler specPropertyRowDeleted;
            
            public event specPropertyRowChangeEventHandler specPropertyRowDeleting;
            
            public void AddspecPropertyRow(specPropertyRow row) {
                this.Rows.Add(row);
            }
            
            public specPropertyRow AddspecPropertyRow(string name, string specProperty_Text, specPropertiesRow parentspecPropertiesRowByspecProperties_specProperty) {
                specPropertyRow rowspecPropertyRow = ((specPropertyRow)(this.NewRow()));
                rowspecPropertyRow.ItemArray = new object[] {
                        name,
                        specProperty_Text,
                        parentspecPropertiesRowByspecProperties_specProperty[0]};
                this.Rows.Add(rowspecPropertyRow);
                return rowspecPropertyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                specPropertyDataTable cln = ((specPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new specPropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnspecProperty_Text = this.Columns["specProperty_Text"];
                this.columnspecProperties_Id = this.Columns["specProperties_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnspecProperty_Text = new DataColumn("specProperty_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnspecProperty_Text);
                this.columnspecProperties_Id = new DataColumn("specProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnspecProperties_Id);
                this.columnname.Namespace = "";
            }
            
            public specPropertyRow NewspecPropertyRow() {
                return ((specPropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new specPropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(specPropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.specPropertyRowChanged != null)) {
                    this.specPropertyRowChanged(this, new specPropertyRowChangeEvent(((specPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.specPropertyRowChanging != null)) {
                    this.specPropertyRowChanging(this, new specPropertyRowChangeEvent(((specPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.specPropertyRowDeleted != null)) {
                    this.specPropertyRowDeleted(this, new specPropertyRowChangeEvent(((specPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.specPropertyRowDeleting != null)) {
                    this.specPropertyRowDeleting(this, new specPropertyRowChangeEvent(((specPropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovespecPropertyRow(specPropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specPropertyRow : DataRow {
            
            private specPropertyDataTable tablespecProperty;
            
            internal specPropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablespecProperty = ((specPropertyDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablespecProperty.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespecProperty.nameColumn] = value;
                }
            }
            
            public string specProperty_Text {
                get {
                    try {
                        return ((string)(this[this.tablespecProperty.specProperty_TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespecProperty.specProperty_TextColumn] = value;
                }
            }
            
            public specPropertiesRow specPropertiesRow {
                get {
                    return ((specPropertiesRow)(this.GetParentRow(this.Table.ParentRelations["specProperties_specProperty"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["specProperties_specProperty"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablespecProperty.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablespecProperty.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsspecProperty_TextNull() {
                return this.IsNull(this.tablespecProperty.specProperty_TextColumn);
            }
            
            public void SetspecProperty_TextNull() {
                this[this.tablespecProperty.specProperty_TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class specPropertyRowChangeEvent : EventArgs {
            
            private specPropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public specPropertyRowChangeEvent(specPropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public specPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingPropertiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnmappingProperties_Id;
            
            private DataColumn columnname;
            
            internal mappingPropertiesDataTable() : 
                    base("mappingProperties") {
                this.InitClass();
            }
            
            internal mappingPropertiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn mappingProperties_IdColumn {
                get {
                    return this.columnmappingProperties_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public mappingPropertiesRow this[int index] {
                get {
                    return ((mappingPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event mappingPropertiesRowChangeEventHandler mappingPropertiesRowChanged;
            
            public event mappingPropertiesRowChangeEventHandler mappingPropertiesRowChanging;
            
            public event mappingPropertiesRowChangeEventHandler mappingPropertiesRowDeleted;
            
            public event mappingPropertiesRowChangeEventHandler mappingPropertiesRowDeleting;
            
            public void AddmappingPropertiesRow(mappingPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            public mappingPropertiesRow AddmappingPropertiesRow(mappingRow parentmappingRowBymapping_mappingProperties) {
                mappingPropertiesRow rowmappingPropertiesRow = ((mappingPropertiesRow)(this.NewRow()));
                rowmappingPropertiesRow.ItemArray = new object[] {
                        null,
                        parentmappingRowBymapping_mappingProperties[0]};
                this.Rows.Add(rowmappingPropertiesRow);
                return rowmappingPropertiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                mappingPropertiesDataTable cln = ((mappingPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new mappingPropertiesDataTable();
            }
            
            internal void InitVars() {
                this.columnmappingProperties_Id = this.Columns["mappingProperties_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnmappingProperties_Id = new DataColumn("mappingProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnmappingProperties_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnmappingProperties_Id}, true));
                this.columnmappingProperties_Id.AutoIncrement = true;
                this.columnmappingProperties_Id.AllowDBNull = false;
                this.columnmappingProperties_Id.Unique = true;
            }
            
            public mappingPropertiesRow NewmappingPropertiesRow() {
                return ((mappingPropertiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new mappingPropertiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(mappingPropertiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mappingPropertiesRowChanged != null)) {
                    this.mappingPropertiesRowChanged(this, new mappingPropertiesRowChangeEvent(((mappingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mappingPropertiesRowChanging != null)) {
                    this.mappingPropertiesRowChanging(this, new mappingPropertiesRowChangeEvent(((mappingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mappingPropertiesRowDeleted != null)) {
                    this.mappingPropertiesRowDeleted(this, new mappingPropertiesRowChangeEvent(((mappingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mappingPropertiesRowDeleting != null)) {
                    this.mappingPropertiesRowDeleting(this, new mappingPropertiesRowChangeEvent(((mappingPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemappingPropertiesRow(mappingPropertiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingPropertiesRow : DataRow {
            
            private mappingPropertiesDataTable tablemappingProperties;
            
            internal mappingPropertiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemappingProperties = ((mappingPropertiesDataTable)(this.Table));
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["mapping_mappingProperties"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mapping_mappingProperties"]);
                }
            }
            
            public mappingPropertyRow[] GetmappingPropertyRows() {
                return ((mappingPropertyRow[])(this.GetChildRows(this.Table.ChildRelations["mappingProperties_mappingProperty"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingPropertiesRowChangeEvent : EventArgs {
            
            private mappingPropertiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public mappingPropertiesRowChangeEvent(mappingPropertiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public mappingPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingPropertyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnmappingProperty_Text;
            
            private DataColumn columnmappingProperties_Id;
            
            internal mappingPropertyDataTable() : 
                    base("mappingProperty") {
                this.InitClass();
            }
            
            internal mappingPropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn mappingProperty_TextColumn {
                get {
                    return this.columnmappingProperty_Text;
                }
            }
            
            internal DataColumn mappingProperties_IdColumn {
                get {
                    return this.columnmappingProperties_Id;
                }
            }
            
            public mappingPropertyRow this[int index] {
                get {
                    return ((mappingPropertyRow)(this.Rows[index]));
                }
            }
            
            public event mappingPropertyRowChangeEventHandler mappingPropertyRowChanged;
            
            public event mappingPropertyRowChangeEventHandler mappingPropertyRowChanging;
            
            public event mappingPropertyRowChangeEventHandler mappingPropertyRowDeleted;
            
            public event mappingPropertyRowChangeEventHandler mappingPropertyRowDeleting;
            
            public void AddmappingPropertyRow(mappingPropertyRow row) {
                this.Rows.Add(row);
            }
            
            public mappingPropertyRow AddmappingPropertyRow(string name, string mappingProperty_Text, mappingPropertiesRow parentmappingPropertiesRowBymappingProperties_mappingProperty) {
                mappingPropertyRow rowmappingPropertyRow = ((mappingPropertyRow)(this.NewRow()));
                rowmappingPropertyRow.ItemArray = new object[] {
                        name,
                        mappingProperty_Text,
                        parentmappingPropertiesRowBymappingProperties_mappingProperty[0]};
                this.Rows.Add(rowmappingPropertyRow);
                return rowmappingPropertyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                mappingPropertyDataTable cln = ((mappingPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new mappingPropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnmappingProperty_Text = this.Columns["mappingProperty_Text"];
                this.columnmappingProperties_Id = this.Columns["mappingProperties_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnmappingProperty_Text = new DataColumn("mappingProperty_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnmappingProperty_Text);
                this.columnmappingProperties_Id = new DataColumn("mappingProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnmappingProperties_Id);
                this.columnname.Namespace = "";
            }
            
            public mappingPropertyRow NewmappingPropertyRow() {
                return ((mappingPropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new mappingPropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(mappingPropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.mappingPropertyRowChanged != null)) {
                    this.mappingPropertyRowChanged(this, new mappingPropertyRowChangeEvent(((mappingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.mappingPropertyRowChanging != null)) {
                    this.mappingPropertyRowChanging(this, new mappingPropertyRowChangeEvent(((mappingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.mappingPropertyRowDeleted != null)) {
                    this.mappingPropertyRowDeleted(this, new mappingPropertyRowChangeEvent(((mappingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.mappingPropertyRowDeleting != null)) {
                    this.mappingPropertyRowDeleting(this, new mappingPropertyRowChangeEvent(((mappingPropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovemappingPropertyRow(mappingPropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingPropertyRow : DataRow {
            
            private mappingPropertyDataTable tablemappingProperty;
            
            internal mappingPropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablemappingProperty = ((mappingPropertyDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablemappingProperty.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemappingProperty.nameColumn] = value;
                }
            }
            
            public string mappingProperty_Text {
                get {
                    try {
                        return ((string)(this[this.tablemappingProperty.mappingProperty_TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablemappingProperty.mappingProperty_TextColumn] = value;
                }
            }
            
            public mappingPropertiesRow mappingPropertiesRow {
                get {
                    return ((mappingPropertiesRow)(this.GetParentRow(this.Table.ParentRelations["mappingProperties_mappingProperty"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mappingProperties_mappingProperty"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablemappingProperty.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablemappingProperty.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsmappingProperty_TextNull() {
                return this.IsNull(this.tablemappingProperty.mappingProperty_TextColumn);
            }
            
            public void SetmappingProperty_TextNull() {
                this[this.tablemappingProperty.mappingProperty_TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class mappingPropertyRowChangeEvent : EventArgs {
            
            private mappingPropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public mappingPropertyRowChangeEvent(mappingPropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public mappingPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontMappingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfontMappings_Id;
            
            private DataColumn columnname;
            
            internal fontMappingsDataTable() : 
                    base("fontMappings") {
                this.InitClass();
            }
            
            internal fontMappingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fontMappings_IdColumn {
                get {
                    return this.columnfontMappings_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public fontMappingsRow this[int index] {
                get {
                    return ((fontMappingsRow)(this.Rows[index]));
                }
            }
            
            public event fontMappingsRowChangeEventHandler fontMappingsRowChanged;
            
            public event fontMappingsRowChangeEventHandler fontMappingsRowChanging;
            
            public event fontMappingsRowChangeEventHandler fontMappingsRowDeleted;
            
            public event fontMappingsRowChangeEventHandler fontMappingsRowDeleting;
            
            public void AddfontMappingsRow(fontMappingsRow row) {
                this.Rows.Add(row);
            }
            
            public fontMappingsRow AddfontMappingsRow(mappingRow parentmappingRowBymapping_fontMappings) {
                fontMappingsRow rowfontMappingsRow = ((fontMappingsRow)(this.NewRow()));
                rowfontMappingsRow.ItemArray = new object[] {
                        null,
                        parentmappingRowBymapping_fontMappings[0]};
                this.Rows.Add(rowfontMappingsRow);
                return rowfontMappingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontMappingsDataTable cln = ((fontMappingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontMappingsDataTable();
            }
            
            internal void InitVars() {
                this.columnfontMappings_Id = this.Columns["fontMappings_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnfontMappings_Id = new DataColumn("fontMappings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfontMappings_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnfontMappings_Id}, true));
                this.columnfontMappings_Id.AutoIncrement = true;
                this.columnfontMappings_Id.AllowDBNull = false;
                this.columnfontMappings_Id.Unique = true;
            }
            
            public fontMappingsRow NewfontMappingsRow() {
                return ((fontMappingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontMappingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontMappingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontMappingsRowChanged != null)) {
                    this.fontMappingsRowChanged(this, new fontMappingsRowChangeEvent(((fontMappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontMappingsRowChanging != null)) {
                    this.fontMappingsRowChanging(this, new fontMappingsRowChangeEvent(((fontMappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontMappingsRowDeleted != null)) {
                    this.fontMappingsRowDeleted(this, new fontMappingsRowChangeEvent(((fontMappingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontMappingsRowDeleting != null)) {
                    this.fontMappingsRowDeleting(this, new fontMappingsRowChangeEvent(((fontMappingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontMappingsRow(fontMappingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontMappingsRow : DataRow {
            
            private fontMappingsDataTable tablefontMappings;
            
            internal fontMappingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefontMappings = ((fontMappingsDataTable)(this.Table));
            }
            
            public mappingRow mappingRow {
                get {
                    return ((mappingRow)(this.GetParentRow(this.Table.ParentRelations["mapping_fontMappings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["mapping_fontMappings"]);
                }
            }
            
            public fontMappingRow[] GetfontMappingRows() {
                return ((fontMappingRow[])(this.GetChildRows(this.Table.ChildRelations["fontMappings_fontMapping"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontMappingsRowChangeEvent : EventArgs {
            
            private fontMappingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontMappingsRowChangeEvent(fontMappingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontMappingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontMappingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnassocFont;
            
            private DataColumn columnfontMappings_Id;
            
            internal fontMappingDataTable() : 
                    base("fontMapping") {
                this.InitClass();
            }
            
            internal fontMappingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn assocFontColumn {
                get {
                    return this.columnassocFont;
                }
            }
            
            internal DataColumn fontMappings_IdColumn {
                get {
                    return this.columnfontMappings_Id;
                }
            }
            
            public fontMappingRow this[int index] {
                get {
                    return ((fontMappingRow)(this.Rows[index]));
                }
            }
            
            public event fontMappingRowChangeEventHandler fontMappingRowChanged;
            
            public event fontMappingRowChangeEventHandler fontMappingRowChanging;
            
            public event fontMappingRowChangeEventHandler fontMappingRowDeleted;
            
            public event fontMappingRowChangeEventHandler fontMappingRowDeleting;
            
            public void AddfontMappingRow(fontMappingRow row) {
                this.Rows.Add(row);
            }
            
            public fontMappingRow AddfontMappingRow(string name, string assocFont, fontMappingsRow parentfontMappingsRowByfontMappings_fontMapping) {
                fontMappingRow rowfontMappingRow = ((fontMappingRow)(this.NewRow()));
                rowfontMappingRow.ItemArray = new object[] {
                        name,
                        assocFont,
                        parentfontMappingsRowByfontMappings_fontMapping[0]};
                this.Rows.Add(rowfontMappingRow);
                return rowfontMappingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontMappingDataTable cln = ((fontMappingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontMappingDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnassocFont = this.Columns["assocFont"];
                this.columnfontMappings_Id = this.Columns["fontMappings_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnassocFont = new DataColumn("assocFont", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnassocFont);
                this.columnfontMappings_Id = new DataColumn("fontMappings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfontMappings_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnassocFont.Namespace = "";
                this.columnassocFont.DefaultValue = "";
            }
            
            public fontMappingRow NewfontMappingRow() {
                return ((fontMappingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontMappingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontMappingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontMappingRowChanged != null)) {
                    this.fontMappingRowChanged(this, new fontMappingRowChangeEvent(((fontMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontMappingRowChanging != null)) {
                    this.fontMappingRowChanging(this, new fontMappingRowChangeEvent(((fontMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontMappingRowDeleted != null)) {
                    this.fontMappingRowDeleted(this, new fontMappingRowChangeEvent(((fontMappingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontMappingRowDeleting != null)) {
                    this.fontMappingRowDeleting(this, new fontMappingRowChangeEvent(((fontMappingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontMappingRow(fontMappingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontMappingRow : DataRow {
            
            private fontMappingDataTable tablefontMapping;
            
            internal fontMappingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefontMapping = ((fontMappingDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablefontMapping.nameColumn]));
                }
                set {
                    this[this.tablefontMapping.nameColumn] = value;
                }
            }
            
            public string assocFont {
                get {
                    try {
                        return ((string)(this[this.tablefontMapping.assocFontColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefontMapping.assocFontColumn] = value;
                }
            }
            
            public fontMappingsRow fontMappingsRow {
                get {
                    return ((fontMappingsRow)(this.GetParentRow(this.Table.ParentRelations["fontMappings_fontMapping"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fontMappings_fontMapping"]);
                }
            }
            
            public bool IsassocFontNull() {
                return this.IsNull(this.tablefontMapping.assocFontColumn);
            }
            
            public void SetassocFontNull() {
                this[this.tablefontMapping.assocFontColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontMappingRowChangeEvent : EventArgs {
            
            private fontMappingRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontMappingRowChangeEvent(fontMappingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontMappingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfonts_Id;
            
            internal fontsDataTable() : 
                    base("fonts") {
                this.InitClass();
            }
            
            internal fontsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fonts_IdColumn {
                get {
                    return this.columnfonts_Id;
                }
            }
            
            public fontsRow this[int index] {
                get {
                    return ((fontsRow)(this.Rows[index]));
                }
            }
            
            public event fontsRowChangeEventHandler fontsRowChanged;
            
            public event fontsRowChangeEventHandler fontsRowChanging;
            
            public event fontsRowChangeEventHandler fontsRowDeleted;
            
            public event fontsRowChangeEventHandler fontsRowDeleting;
            
            public void AddfontsRow(fontsRow row) {
                this.Rows.Add(row);
            }
            
            public fontsRow AddfontsRow() {
                fontsRow rowfontsRow = ((fontsRow)(this.NewRow()));
                rowfontsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowfontsRow);
                return rowfontsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontsDataTable cln = ((fontsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontsDataTable();
            }
            
            internal void InitVars() {
                this.columnfonts_Id = this.Columns["fonts_Id"];
            }
            
            private void InitClass() {
                this.columnfonts_Id = new DataColumn("fonts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfonts_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnfonts_Id}, true));
                this.columnfonts_Id.AutoIncrement = true;
                this.columnfonts_Id.AllowDBNull = false;
                this.columnfonts_Id.Unique = true;
            }
            
            public fontsRow NewfontsRow() {
                return ((fontsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontsRowChanged != null)) {
                    this.fontsRowChanged(this, new fontsRowChangeEvent(((fontsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontsRowChanging != null)) {
                    this.fontsRowChanging(this, new fontsRowChangeEvent(((fontsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontsRowDeleted != null)) {
                    this.fontsRowDeleted(this, new fontsRowChangeEvent(((fontsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontsRowDeleting != null)) {
                    this.fontsRowDeleting(this, new fontsRowChangeEvent(((fontsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontsRow(fontsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontsRow : DataRow {
            
            private fontsDataTable tablefonts;
            
            internal fontsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefonts = ((fontsDataTable)(this.Table));
            }
            
            public fontRow[] GetfontRows() {
                return ((fontRow[])(this.GetChildRows(this.Table.ChildRelations["fonts_font"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontsRowChangeEvent : EventArgs {
            
            private fontsRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontsRowChangeEvent(fontsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columncp;
            
            private DataColumn columnfonts_Id;
            
            internal fontDataTable() : 
                    base("font") {
                this.InitClass();
            }
            
            internal fontDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn cpColumn {
                get {
                    return this.columncp;
                }
            }
            
            internal DataColumn fonts_IdColumn {
                get {
                    return this.columnfonts_Id;
                }
            }
            
            public fontRow this[int index] {
                get {
                    return ((fontRow)(this.Rows[index]));
                }
            }
            
            public event fontRowChangeEventHandler fontRowChanged;
            
            public event fontRowChangeEventHandler fontRowChanging;
            
            public event fontRowChangeEventHandler fontRowDeleted;
            
            public event fontRowChangeEventHandler fontRowDeleting;
            
            public void AddfontRow(fontRow row) {
                this.Rows.Add(row);
            }
            
            public fontRow AddfontRow(string name, int cp, fontsRow parentfontsRowByfonts_font) {
                fontRow rowfontRow = ((fontRow)(this.NewRow()));
                rowfontRow.ItemArray = new object[] {
                        name,
                        cp,
                        parentfontsRowByfonts_font[0]};
                this.Rows.Add(rowfontRow);
                return rowfontRow;
            }
            
            public fontRow FindByname(string name) {
                return ((fontRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontDataTable cln = ((fontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columncp = this.Columns["cp"];
                this.columnfonts_Id = this.Columns["fonts_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columncp = new DataColumn("cp", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columncp);
                this.columnfonts_Id = new DataColumn("fonts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfonts_Id);
                this.Constraints.Add(new UniqueConstraint("fontKey", new DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
                this.columncp.Namespace = "";
                this.columncp.DefaultValue = 0;
            }
            
            public fontRow NewfontRow() {
                return ((fontRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontRowChanged != null)) {
                    this.fontRowChanged(this, new fontRowChangeEvent(((fontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontRowChanging != null)) {
                    this.fontRowChanging(this, new fontRowChangeEvent(((fontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontRowDeleted != null)) {
                    this.fontRowDeleted(this, new fontRowChangeEvent(((fontRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontRowDeleting != null)) {
                    this.fontRowDeleting(this, new fontRowChangeEvent(((fontRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontRow(fontRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontRow : DataRow {
            
            private fontDataTable tablefont;
            
            internal fontRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefont = ((fontDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablefont.nameColumn]));
                }
                set {
                    this[this.tablefont.nameColumn] = value;
                }
            }
            
            public int cp {
                get {
                    try {
                        return ((int)(this[this.tablefont.cpColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefont.cpColumn] = value;
                }
            }
            
            public fontsRow fontsRow {
                get {
                    return ((fontsRow)(this.GetParentRow(this.Table.ParentRelations["fonts_font"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fonts_font"]);
                }
            }
            
            public bool IscpNull() {
                return this.IsNull(this.tablefont.cpColumn);
            }
            
            public void SetcpNull() {
                this[this.tablefont.cpColumn] = System.Convert.DBNull;
            }
            
            public fontPropertiesRow[] GetfontPropertiesRows() {
                return ((fontPropertiesRow[])(this.GetChildRows(this.Table.ChildRelations["font_fontProperties"])));
            }
            
            public fontEncodingsRow[] GetfontEncodingsRows() {
                return ((fontEncodingsRow[])(this.GetChildRows(this.Table.ChildRelations["font_fontEncodings"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontRowChangeEvent : EventArgs {
            
            private fontRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontRowChangeEvent(fontRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontPropertiesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfontProperties_Id;
            
            private DataColumn columnname;
            
            internal fontPropertiesDataTable() : 
                    base("fontProperties") {
                this.InitClass();
            }
            
            internal fontPropertiesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fontProperties_IdColumn {
                get {
                    return this.columnfontProperties_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public fontPropertiesRow this[int index] {
                get {
                    return ((fontPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event fontPropertiesRowChangeEventHandler fontPropertiesRowChanged;
            
            public event fontPropertiesRowChangeEventHandler fontPropertiesRowChanging;
            
            public event fontPropertiesRowChangeEventHandler fontPropertiesRowDeleted;
            
            public event fontPropertiesRowChangeEventHandler fontPropertiesRowDeleting;
            
            public void AddfontPropertiesRow(fontPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            public fontPropertiesRow AddfontPropertiesRow(fontRow parentfontRowByfont_fontProperties) {
                fontPropertiesRow rowfontPropertiesRow = ((fontPropertiesRow)(this.NewRow()));
                rowfontPropertiesRow.ItemArray = new object[] {
                        null,
                        parentfontRowByfont_fontProperties[0]};
                this.Rows.Add(rowfontPropertiesRow);
                return rowfontPropertiesRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontPropertiesDataTable cln = ((fontPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontPropertiesDataTable();
            }
            
            internal void InitVars() {
                this.columnfontProperties_Id = this.Columns["fontProperties_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnfontProperties_Id = new DataColumn("fontProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfontProperties_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnfontProperties_Id}, true));
                this.columnfontProperties_Id.AutoIncrement = true;
                this.columnfontProperties_Id.AllowDBNull = false;
                this.columnfontProperties_Id.Unique = true;
            }
            
            public fontPropertiesRow NewfontPropertiesRow() {
                return ((fontPropertiesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontPropertiesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontPropertiesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontPropertiesRowChanged != null)) {
                    this.fontPropertiesRowChanged(this, new fontPropertiesRowChangeEvent(((fontPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontPropertiesRowChanging != null)) {
                    this.fontPropertiesRowChanging(this, new fontPropertiesRowChangeEvent(((fontPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontPropertiesRowDeleted != null)) {
                    this.fontPropertiesRowDeleted(this, new fontPropertiesRowChangeEvent(((fontPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontPropertiesRowDeleting != null)) {
                    this.fontPropertiesRowDeleting(this, new fontPropertiesRowChangeEvent(((fontPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontPropertiesRow(fontPropertiesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontPropertiesRow : DataRow {
            
            private fontPropertiesDataTable tablefontProperties;
            
            internal fontPropertiesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefontProperties = ((fontPropertiesDataTable)(this.Table));
            }
            
            public fontRow fontRow {
                get {
                    return ((fontRow)(this.GetParentRow(this.Table.ParentRelations["font_fontProperties"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["font_fontProperties"]);
                }
            }
            
            public fontPropertyRow[] GetfontPropertyRows() {
                return ((fontPropertyRow[])(this.GetChildRows(this.Table.ChildRelations["fontProperties_fontProperty"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontPropertiesRowChangeEvent : EventArgs {
            
            private fontPropertiesRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontPropertiesRowChangeEvent(fontPropertiesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontPropertyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnfontProperty_Text;
            
            private DataColumn columnfontProperties_Id;
            
            internal fontPropertyDataTable() : 
                    base("fontProperty") {
                this.InitClass();
            }
            
            internal fontPropertyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn fontProperty_TextColumn {
                get {
                    return this.columnfontProperty_Text;
                }
            }
            
            internal DataColumn fontProperties_IdColumn {
                get {
                    return this.columnfontProperties_Id;
                }
            }
            
            public fontPropertyRow this[int index] {
                get {
                    return ((fontPropertyRow)(this.Rows[index]));
                }
            }
            
            public event fontPropertyRowChangeEventHandler fontPropertyRowChanged;
            
            public event fontPropertyRowChangeEventHandler fontPropertyRowChanging;
            
            public event fontPropertyRowChangeEventHandler fontPropertyRowDeleted;
            
            public event fontPropertyRowChangeEventHandler fontPropertyRowDeleting;
            
            public void AddfontPropertyRow(fontPropertyRow row) {
                this.Rows.Add(row);
            }
            
            public fontPropertyRow AddfontPropertyRow(string name, string fontProperty_Text, fontPropertiesRow parentfontPropertiesRowByfontProperties_fontProperty) {
                fontPropertyRow rowfontPropertyRow = ((fontPropertyRow)(this.NewRow()));
                rowfontPropertyRow.ItemArray = new object[] {
                        name,
                        fontProperty_Text,
                        parentfontPropertiesRowByfontProperties_fontProperty[0]};
                this.Rows.Add(rowfontPropertyRow);
                return rowfontPropertyRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontPropertyDataTable cln = ((fontPropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontPropertyDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnfontProperty_Text = this.Columns["fontProperty_Text"];
                this.columnfontProperties_Id = this.Columns["fontProperties_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnfontProperty_Text = new DataColumn("fontProperty_Text", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columnfontProperty_Text);
                this.columnfontProperties_Id = new DataColumn("fontProperties_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfontProperties_Id);
                this.columnname.Namespace = "";
            }
            
            public fontPropertyRow NewfontPropertyRow() {
                return ((fontPropertyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontPropertyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontPropertyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontPropertyRowChanged != null)) {
                    this.fontPropertyRowChanged(this, new fontPropertyRowChangeEvent(((fontPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontPropertyRowChanging != null)) {
                    this.fontPropertyRowChanging(this, new fontPropertyRowChangeEvent(((fontPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontPropertyRowDeleted != null)) {
                    this.fontPropertyRowDeleted(this, new fontPropertyRowChangeEvent(((fontPropertyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontPropertyRowDeleting != null)) {
                    this.fontPropertyRowDeleting(this, new fontPropertyRowChangeEvent(((fontPropertyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontPropertyRow(fontPropertyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontPropertyRow : DataRow {
            
            private fontPropertyDataTable tablefontProperty;
            
            internal fontPropertyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefontProperty = ((fontPropertyDataTable)(this.Table));
            }
            
            public string name {
                get {
                    try {
                        return ((string)(this[this.tablefontProperty.nameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefontProperty.nameColumn] = value;
                }
            }
            
            public string fontProperty_Text {
                get {
                    try {
                        return ((string)(this[this.tablefontProperty.fontProperty_TextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefontProperty.fontProperty_TextColumn] = value;
                }
            }
            
            public fontPropertiesRow fontPropertiesRow {
                get {
                    return ((fontPropertiesRow)(this.GetParentRow(this.Table.ParentRelations["fontProperties_fontProperty"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fontProperties_fontProperty"]);
                }
            }
            
            public bool IsnameNull() {
                return this.IsNull(this.tablefontProperty.nameColumn);
            }
            
            public void SetnameNull() {
                this[this.tablefontProperty.nameColumn] = System.Convert.DBNull;
            }
            
            public bool IsfontProperty_TextNull() {
                return this.IsNull(this.tablefontProperty.fontProperty_TextColumn);
            }
            
            public void SetfontProperty_TextNull() {
                this[this.tablefontProperty.fontProperty_TextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontPropertyRowChangeEvent : EventArgs {
            
            private fontPropertyRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontPropertyRowChangeEvent(fontPropertyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontPropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontEncodingsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnfontEncodings_Id;
            
            private DataColumn columnname;
            
            internal fontEncodingsDataTable() : 
                    base("fontEncodings") {
                this.InitClass();
            }
            
            internal fontEncodingsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn fontEncodings_IdColumn {
                get {
                    return this.columnfontEncodings_Id;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public fontEncodingsRow this[int index] {
                get {
                    return ((fontEncodingsRow)(this.Rows[index]));
                }
            }
            
            public event fontEncodingsRowChangeEventHandler fontEncodingsRowChanged;
            
            public event fontEncodingsRowChangeEventHandler fontEncodingsRowChanging;
            
            public event fontEncodingsRowChangeEventHandler fontEncodingsRowDeleted;
            
            public event fontEncodingsRowChangeEventHandler fontEncodingsRowDeleting;
            
            public void AddfontEncodingsRow(fontEncodingsRow row) {
                this.Rows.Add(row);
            }
            
            public fontEncodingsRow AddfontEncodingsRow(fontRow parentfontRowByfont_fontEncodings) {
                fontEncodingsRow rowfontEncodingsRow = ((fontEncodingsRow)(this.NewRow()));
                rowfontEncodingsRow.ItemArray = new object[] {
                        null,
                        parentfontRowByfont_fontEncodings[0]};
                this.Rows.Add(rowfontEncodingsRow);
                return rowfontEncodingsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontEncodingsDataTable cln = ((fontEncodingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontEncodingsDataTable();
            }
            
            internal void InitVars() {
                this.columnfontEncodings_Id = this.Columns["fontEncodings_Id"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columnfontEncodings_Id = new DataColumn("fontEncodings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfontEncodings_Id);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnfontEncodings_Id}, true));
                this.columnfontEncodings_Id.AutoIncrement = true;
                this.columnfontEncodings_Id.AllowDBNull = false;
                this.columnfontEncodings_Id.Unique = true;
            }
            
            public fontEncodingsRow NewfontEncodingsRow() {
                return ((fontEncodingsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontEncodingsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontEncodingsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontEncodingsRowChanged != null)) {
                    this.fontEncodingsRowChanged(this, new fontEncodingsRowChangeEvent(((fontEncodingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontEncodingsRowChanging != null)) {
                    this.fontEncodingsRowChanging(this, new fontEncodingsRowChangeEvent(((fontEncodingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontEncodingsRowDeleted != null)) {
                    this.fontEncodingsRowDeleted(this, new fontEncodingsRowChangeEvent(((fontEncodingsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontEncodingsRowDeleting != null)) {
                    this.fontEncodingsRowDeleting(this, new fontEncodingsRowChangeEvent(((fontEncodingsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontEncodingsRow(fontEncodingsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontEncodingsRow : DataRow {
            
            private fontEncodingsDataTable tablefontEncodings;
            
            internal fontEncodingsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefontEncodings = ((fontEncodingsDataTable)(this.Table));
            }
            
            public fontRow fontRow {
                get {
                    return ((fontRow)(this.GetParentRow(this.Table.ParentRelations["font_fontEncodings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["font_fontEncodings"]);
                }
            }
            
            public fontEncodingRow[] GetfontEncodingRows() {
                return ((fontEncodingRow[])(this.GetChildRows(this.Table.ChildRelations["fontEncodings_fontEncoding"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontEncodingsRowChangeEvent : EventArgs {
            
            private fontEncodingsRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontEncodingsRowChangeEvent(fontEncodingsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontEncodingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontEncodingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnunique;
            
            private DataColumn columnfontEncodings_Id;
            
            internal fontEncodingDataTable() : 
                    base("fontEncoding") {
                this.InitClass();
            }
            
            internal fontEncodingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn uniqueColumn {
                get {
                    return this.columnunique;
                }
            }
            
            internal DataColumn fontEncodings_IdColumn {
                get {
                    return this.columnfontEncodings_Id;
                }
            }
            
            public fontEncodingRow this[int index] {
                get {
                    return ((fontEncodingRow)(this.Rows[index]));
                }
            }
            
            public event fontEncodingRowChangeEventHandler fontEncodingRowChanged;
            
            public event fontEncodingRowChangeEventHandler fontEncodingRowChanging;
            
            public event fontEncodingRowChangeEventHandler fontEncodingRowDeleted;
            
            public event fontEncodingRowChangeEventHandler fontEncodingRowDeleting;
            
            public void AddfontEncodingRow(fontEncodingRow row) {
                this.Rows.Add(row);
            }
            
            public fontEncodingRow AddfontEncodingRow(encodingRow parentencodingRowByfontEncodingRef, bool unique, fontEncodingsRow parentfontEncodingsRowByfontEncodings_fontEncoding) {
                fontEncodingRow rowfontEncodingRow = ((fontEncodingRow)(this.NewRow()));
                rowfontEncodingRow.ItemArray = new object[] {
                        parentencodingRowByfontEncodingRef[0],
                        unique,
                        parentfontEncodingsRowByfontEncodings_fontEncoding[0]};
                this.Rows.Add(rowfontEncodingRow);
                return rowfontEncodingRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                fontEncodingDataTable cln = ((fontEncodingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new fontEncodingDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnunique = this.Columns["unique"];
                this.columnfontEncodings_Id = this.Columns["fontEncodings_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnunique = new DataColumn("unique", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnunique);
                this.columnfontEncodings_Id = new DataColumn("fontEncodings_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnfontEncodings_Id);
                this.columnname.AllowDBNull = false;
                this.columnname.Namespace = "";
                this.columnunique.Namespace = "";
                this.columnunique.DefaultValue = false;
            }
            
            public fontEncodingRow NewfontEncodingRow() {
                return ((fontEncodingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new fontEncodingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(fontEncodingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.fontEncodingRowChanged != null)) {
                    this.fontEncodingRowChanged(this, new fontEncodingRowChangeEvent(((fontEncodingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.fontEncodingRowChanging != null)) {
                    this.fontEncodingRowChanging(this, new fontEncodingRowChangeEvent(((fontEncodingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.fontEncodingRowDeleted != null)) {
                    this.fontEncodingRowDeleted(this, new fontEncodingRowChangeEvent(((fontEncodingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.fontEncodingRowDeleting != null)) {
                    this.fontEncodingRowDeleting(this, new fontEncodingRowChangeEvent(((fontEncodingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovefontEncodingRow(fontEncodingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontEncodingRow : DataRow {
            
            private fontEncodingDataTable tablefontEncoding;
            
            internal fontEncodingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablefontEncoding = ((fontEncodingDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tablefontEncoding.nameColumn]));
                }
                set {
                    this[this.tablefontEncoding.nameColumn] = value;
                }
            }
            
            public bool unique {
                get {
                    try {
                        return ((bool)(this[this.tablefontEncoding.uniqueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablefontEncoding.uniqueColumn] = value;
                }
            }
            
            public fontEncodingsRow fontEncodingsRow {
                get {
                    return ((fontEncodingsRow)(this.GetParentRow(this.Table.ParentRelations["fontEncodings_fontEncoding"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fontEncodings_fontEncoding"]);
                }
            }
            
            public encodingRow encodingRow {
                get {
                    return ((encodingRow)(this.GetParentRow(this.Table.ParentRelations["fontEncodingRef"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fontEncodingRef"]);
                }
            }
            
            public bool IsuniqueNull() {
                return this.IsNull(this.tablefontEncoding.uniqueColumn);
            }
            
            public void SetuniqueNull() {
                this[this.tablefontEncoding.uniqueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class fontEncodingRowChangeEvent : EventArgs {
            
            private fontEncodingRow eventRow;
            
            private DataRowAction eventAction;
            
            public fontEncodingRowChangeEvent(fontEncodingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public fontEncodingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class implementationsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnimplementations_Id;
            
            internal implementationsDataTable() : 
                    base("implementations") {
                this.InitClass();
            }
            
            internal implementationsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn implementations_IdColumn {
                get {
                    return this.columnimplementations_Id;
                }
            }
            
            public implementationsRow this[int index] {
                get {
                    return ((implementationsRow)(this.Rows[index]));
                }
            }
            
            public event implementationsRowChangeEventHandler implementationsRowChanged;
            
            public event implementationsRowChangeEventHandler implementationsRowChanging;
            
            public event implementationsRowChangeEventHandler implementationsRowDeleted;
            
            public event implementationsRowChangeEventHandler implementationsRowDeleting;
            
            public void AddimplementationsRow(implementationsRow row) {
                this.Rows.Add(row);
            }
            
            public implementationsRow AddimplementationsRow() {
                implementationsRow rowimplementationsRow = ((implementationsRow)(this.NewRow()));
                rowimplementationsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowimplementationsRow);
                return rowimplementationsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                implementationsDataTable cln = ((implementationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new implementationsDataTable();
            }
            
            internal void InitVars() {
                this.columnimplementations_Id = this.Columns["implementations_Id"];
            }
            
            private void InitClass() {
                this.columnimplementations_Id = new DataColumn("implementations_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnimplementations_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnimplementations_Id}, true));
                this.columnimplementations_Id.AutoIncrement = true;
                this.columnimplementations_Id.AllowDBNull = false;
                this.columnimplementations_Id.Unique = true;
            }
            
            public implementationsRow NewimplementationsRow() {
                return ((implementationsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new implementationsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(implementationsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.implementationsRowChanged != null)) {
                    this.implementationsRowChanged(this, new implementationsRowChangeEvent(((implementationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.implementationsRowChanging != null)) {
                    this.implementationsRowChanging(this, new implementationsRowChangeEvent(((implementationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.implementationsRowDeleted != null)) {
                    this.implementationsRowDeleted(this, new implementationsRowChangeEvent(((implementationsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.implementationsRowDeleting != null)) {
                    this.implementationsRowDeleting(this, new implementationsRowChangeEvent(((implementationsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveimplementationsRow(implementationsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class implementationsRow : DataRow {
            
            private implementationsDataTable tableimplementations;
            
            internal implementationsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableimplementations = ((implementationsDataTable)(this.Table));
            }
            
            public platformRow[] GetplatformRows() {
                return ((platformRow[])(this.GetChildRows(this.Table.ChildRelations["implementations_platform"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class implementationsRowChangeEvent : EventArgs {
            
            private implementationsRow eventRow;
            
            private DataRowAction eventAction;
            
            public implementationsRowChangeEvent(implementationsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public implementationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class platformDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnname;
            
            private DataColumn columnimplementations_Id;
            
            internal platformDataTable() : 
                    base("platform") {
                this.InitClass();
            }
            
            internal platformDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            internal DataColumn implementations_IdColumn {
                get {
                    return this.columnimplementations_Id;
                }
            }
            
            public platformRow this[int index] {
                get {
                    return ((platformRow)(this.Rows[index]));
                }
            }
            
            public event platformRowChangeEventHandler platformRowChanged;
            
            public event platformRowChangeEventHandler platformRowChanging;
            
            public event platformRowChangeEventHandler platformRowDeleted;
            
            public event platformRowChangeEventHandler platformRowDeleting;
            
            public void AddplatformRow(platformRow row) {
                this.Rows.Add(row);
            }
            
            public platformRow AddplatformRow(string name, implementationsRow parentimplementationsRowByimplementations_platform) {
                platformRow rowplatformRow = ((platformRow)(this.NewRow()));
                rowplatformRow.ItemArray = new object[] {
                        name,
                        parentimplementationsRowByimplementations_platform[0]};
                this.Rows.Add(rowplatformRow);
                return rowplatformRow;
            }
            
            public platformRow FindByname(string name) {
                return ((platformRow)(this.Rows.Find(new object[] {
                            name})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                platformDataTable cln = ((platformDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new platformDataTable();
            }
            
            internal void InitVars() {
                this.columnname = this.Columns["name"];
                this.columnimplementations_Id = this.Columns["implementations_Id"];
            }
            
            private void InitClass() {
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnname);
                this.columnimplementations_Id = new DataColumn("implementations_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnimplementations_Id);
                this.Constraints.Add(new UniqueConstraint("platformKey", new DataColumn[] {
                                this.columnname}, true));
                this.columnname.AllowDBNull = false;
                this.columnname.Unique = true;
                this.columnname.Namespace = "";
            }
            
            public platformRow NewplatformRow() {
                return ((platformRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new platformRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(platformRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.platformRowChanged != null)) {
                    this.platformRowChanged(this, new platformRowChangeEvent(((platformRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.platformRowChanging != null)) {
                    this.platformRowChanging(this, new platformRowChangeEvent(((platformRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.platformRowDeleted != null)) {
                    this.platformRowDeleted(this, new platformRowChangeEvent(((platformRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.platformRowDeleting != null)) {
                    this.platformRowDeleting(this, new platformRowChangeEvent(((platformRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveplatformRow(platformRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class platformRow : DataRow {
            
            private platformDataTable tableplatform;
            
            internal platformRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableplatform = ((platformDataTable)(this.Table));
            }
            
            public string name {
                get {
                    return ((string)(this[this.tableplatform.nameColumn]));
                }
                set {
                    this[this.tableplatform.nameColumn] = value;
                }
            }
            
            public implementationsRow implementationsRow {
                get {
                    return ((implementationsRow)(this.GetParentRow(this.Table.ParentRelations["implementations_platform"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["implementations_platform"]);
                }
            }
            
            public implementRow[] GetimplementRows() {
                return ((implementRow[])(this.GetChildRows(this.Table.ChildRelations["platform_implement"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class platformRowChangeEvent : EventArgs {
            
            private platformRow eventRow;
            
            private DataRowAction eventAction;
            
            public platformRowChangeEvent(platformRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public platformRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class implementDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntype;
            
            private DataColumn columnuse;
            
            private DataColumn columnpriority;
            
            private DataColumn columnname;
            
            internal implementDataTable() : 
                    base("implement") {
                this.InitClass();
            }
            
            internal implementDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            internal DataColumn useColumn {
                get {
                    return this.columnuse;
                }
            }
            
            internal DataColumn priorityColumn {
                get {
                    return this.columnpriority;
                }
            }
            
            internal DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            public implementRow this[int index] {
                get {
                    return ((implementRow)(this.Rows[index]));
                }
            }
            
            public event implementRowChangeEventHandler implementRowChanged;
            
            public event implementRowChangeEventHandler implementRowChanging;
            
            public event implementRowChangeEventHandler implementRowDeleted;
            
            public event implementRowChangeEventHandler implementRowDeleting;
            
            public void AddimplementRow(implementRow row) {
                this.Rows.Add(row);
            }
            
            public implementRow AddimplementRow(string type, string use, int priority, platformRow parentplatformRowByplatform_implement) {
                implementRow rowimplementRow = ((implementRow)(this.NewRow()));
                rowimplementRow.ItemArray = new object[] {
                        type,
                        use,
                        priority,
                        parentplatformRowByplatform_implement[0]};
                this.Rows.Add(rowimplementRow);
                return rowimplementRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                implementDataTable cln = ((implementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new implementDataTable();
            }
            
            internal void InitVars() {
                this.columntype = this.Columns["type"];
                this.columnuse = this.Columns["use"];
                this.columnpriority = this.Columns["priority"];
                this.columnname = this.Columns["name"];
            }
            
            private void InitClass() {
                this.columntype = new DataColumn("type", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columntype);
                this.columnuse = new DataColumn("use", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnuse);
                this.columnpriority = new DataColumn("priority", typeof(int), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnpriority);
                this.columnname = new DataColumn("name", typeof(string), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnname);
                this.columntype.AllowDBNull = false;
                this.columntype.Namespace = "";
                this.columnuse.AllowDBNull = false;
                this.columnuse.Namespace = "";
                this.columnpriority.Namespace = "";
                this.columnpriority.DefaultValue = 0;
            }
            
            public implementRow NewimplementRow() {
                return ((implementRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new implementRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(implementRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.implementRowChanged != null)) {
                    this.implementRowChanged(this, new implementRowChangeEvent(((implementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.implementRowChanging != null)) {
                    this.implementRowChanging(this, new implementRowChangeEvent(((implementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.implementRowDeleted != null)) {
                    this.implementRowDeleted(this, new implementRowChangeEvent(((implementRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.implementRowDeleting != null)) {
                    this.implementRowDeleting(this, new implementRowChangeEvent(((implementRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveimplementRow(implementRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class implementRow : DataRow {
            
            private implementDataTable tableimplement;
            
            internal implementRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableimplement = ((implementDataTable)(this.Table));
            }
            
            public string type {
                get {
                    return ((string)(this[this.tableimplement.typeColumn]));
                }
                set {
                    this[this.tableimplement.typeColumn] = value;
                }
            }
            
            public string use {
                get {
                    return ((string)(this[this.tableimplement.useColumn]));
                }
                set {
                    this[this.tableimplement.useColumn] = value;
                }
            }
            
            public int priority {
                get {
                    try {
                        return ((int)(this[this.tableimplement.priorityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableimplement.priorityColumn] = value;
                }
            }
            
            public platformRow platformRow {
                get {
                    return ((platformRow)(this.GetParentRow(this.Table.ParentRelations["platform_implement"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["platform_implement"]);
                }
            }
            
            public bool IspriorityNull() {
                return this.IsNull(this.tableimplement.priorityColumn);
            }
            
            public void SetpriorityNull() {
                this[this.tableimplement.priorityColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class implementRowChangeEvent : EventArgs {
            
            private implementRow eventRow;
            
            private DataRowAction eventAction;
            
            public implementRowChangeEvent(implementRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public implementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
